/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NoteComment from './NoteComment';

/**
 * The Note model module.
 * @module models/Note
 * @version 1.0.0
 */
class Note {
    /**
     * Constructs a new <code>Note</code>.
     * Serializer for notes
     * @alias module:models/Note
     * @param id {Number} 
     * @param createdByName {String} 
     * @param assignedToName {String} 
     * @param comments {Array.<module:models/NoteComment>} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     * @param createdBy {Number} 
     */
    constructor(id, createdByName, assignedToName, comments, createdAt, updatedAt, createdBy) { 
        
        Note.initialize(this, id, createdByName, assignedToName, comments, createdAt, updatedAt, createdBy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdByName, assignedToName, comments, createdAt, updatedAt, createdBy) { 
        obj['id'] = id;
        obj['created_by_name'] = createdByName;
        obj['assigned_to_name'] = assignedToName;
        obj['comments'] = comments;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
        obj['created_by'] = createdBy;
    }

    /**
     * Constructs a <code>Note</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/Note} obj Optional instance to populate.
     * @return {module:models/Note} The populated <code>Note</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Note();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created_by_name')) {
                obj['created_by_name'] = ApiClient.convertToType(data['created_by_name'], 'String');
            }
            if (data.hasOwnProperty('assigned_to_name')) {
                obj['assigned_to_name'] = ApiClient.convertToType(data['assigned_to_name'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [NoteComment]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('remind_date')) {
                obj['remind_date'] = ApiClient.convertToType(data['remind_date'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('application')) {
                obj['application'] = ApiClient.convertToType(data['application'], 'Number');
            }
            if (data.hasOwnProperty('borrower')) {
                obj['borrower'] = ApiClient.convertToType(data['borrower'], 'Number');
            }
            if (data.hasOwnProperty('assigned_to')) {
                obj['assigned_to'] = ApiClient.convertToType(data['assigned_to'], 'Number');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Note</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Note</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Note.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_by_name'] && !(typeof data['created_by_name'] === 'string' || data['created_by_name'] instanceof String)) {
            throw new Error("Expected the field `created_by_name` to be a primitive type in the JSON string but got " + data['created_by_name']);
        }
        // ensure the json data is a string
        if (data['assigned_to_name'] && !(typeof data['assigned_to_name'] === 'string' || data['assigned_to_name'] instanceof String)) {
            throw new Error("Expected the field `assigned_to_name` to be a primitive type in the JSON string but got " + data['assigned_to_name']);
        }
        if (data['comments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comments'])) {
                throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
            }
            // validate the optional field `comments` (array)
            for (const item of data['comments']) {
                NoteComment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }

        return true;
    }


}

Note.RequiredProperties = ["id", "created_by_name", "assigned_to_name", "comments", "created_at", "updated_at", "created_by"];

/**
 * @member {Number} id
 */
Note.prototype['id'] = undefined;

/**
 * @member {String} created_by_name
 */
Note.prototype['created_by_name'] = undefined;

/**
 * @member {String} assigned_to_name
 */
Note.prototype['assigned_to_name'] = undefined;

/**
 * @member {Array.<module:models/NoteComment>} comments
 */
Note.prototype['comments'] = undefined;

/**
 * @member {String} title
 */
Note.prototype['title'] = undefined;

/**
 * @member {String} content
 */
Note.prototype['content'] = undefined;

/**
 * @member {Date} remind_date
 */
Note.prototype['remind_date'] = undefined;

/**
 * @member {Date} created_at
 */
Note.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Note.prototype['updated_at'] = undefined;

/**
 * @member {Number} application
 */
Note.prototype['application'] = undefined;

/**
 * @member {Number} borrower
 */
Note.prototype['borrower'] = undefined;

/**
 * @member {Number} assigned_to
 */
Note.prototype['assigned_to'] = undefined;

/**
 * @member {Number} created_by
 */
Note.prototype['created_by'] = undefined;






export default Note;

