/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Notification from '../models/Notification';
import NotificationList from '../models/NotificationList';
import NotificationPreference from '../models/NotificationPreference';
import NotificationPreferenceRequest from '../models/NotificationPreferenceRequest';
import NotificationRequest from '../models/NotificationRequest';
import PaginatedNotificationListList from '../models/PaginatedNotificationListList';
import PaginatedUserList from '../models/PaginatedUserList';
import PatchedUserRequest from '../models/PatchedUserRequest';
import TokenRefresh from '../models/TokenRefresh';
import TokenRefreshRequest from '../models/TokenRefreshRequest';
import User from '../models/User';
import UserCreate from '../models/UserCreate';
import UserCreateRequest from '../models/UserCreateRequest';
import UserLoginRequest from '../models/UserLoginRequest';
import UserRequest from '../models/UserRequest';
import UsersAuthLoginCreate200Response from '../models/UsersAuthLoginCreate200Response';

/**
* Users service.
* @module services/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:services/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersAuthLoginCreate operation.
     * @callback module:services/UsersApi~usersAuthLoginCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/UsersAuthLoginCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for user login
     * @param {module:models/UserLoginRequest} userLoginRequest 
     * @param {module:services/UsersApi~usersAuthLoginCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/UsersAuthLoginCreate200Response}
     */
    usersAuthLoginCreate(userLoginRequest, callback) {
      let postBody = userLoginRequest;
      // verify the required parameter 'userLoginRequest' is set
      if (userLoginRequest === undefined || userLoginRequest === null) {
        throw new Error("Missing the required parameter 'userLoginRequest' when calling usersAuthLoginCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UsersAuthLoginCreate200Response;
      return this.apiClient.callApi(
        '/api/users/auth/login/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersAuthRefreshCreate operation.
     * @callback module:services/UsersApi~usersAuthRefreshCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/TokenRefresh} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {module:models/TokenRefreshRequest} tokenRefreshRequest 
     * @param {module:services/UsersApi~usersAuthRefreshCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/TokenRefresh}
     */
    usersAuthRefreshCreate(tokenRefreshRequest, callback) {
      let postBody = tokenRefreshRequest;
      // verify the required parameter 'tokenRefreshRequest' is set
      if (tokenRefreshRequest === undefined || tokenRefreshRequest === null) {
        throw new Error("Missing the required parameter 'tokenRefreshRequest' when calling usersAuthRefreshCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TokenRefresh;
      return this.apiClient.callApi(
        '/api/users/auth/refresh/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersAuthRegisterCreate operation.
     * @callback module:services/UsersApi~usersAuthRegisterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/UserCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for user registration
     * @param {module:models/UserCreateRequest} userCreateRequest 
     * @param {module:services/UsersApi~usersAuthRegisterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/UserCreate}
     */
    usersAuthRegisterCreate(userCreateRequest, callback) {
      let postBody = userCreateRequest;
      // verify the required parameter 'userCreateRequest' is set
      if (userCreateRequest === undefined || userCreateRequest === null) {
        throw new Error("Missing the required parameter 'userCreateRequest' when calling usersAuthRegisterCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserCreate;
      return this.apiClient.callApi(
        '/api/users/auth/register/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationPreferencesRetrieve operation.
     * @callback module:services/UsersApi~usersNotificationPreferencesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/NotificationPreference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notification preferences for the current user
     * @param {module:services/UsersApi~usersNotificationPreferencesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/NotificationPreference}
     */
    usersNotificationPreferencesRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationPreference;
      return this.apiClient.callApi(
        '/api/users/notification-preferences/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationPreferencesUpdate operation.
     * @callback module:services/UsersApi~usersNotificationPreferencesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/NotificationPreference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update notification preferences for the current user
     * @param {Object} opts Optional parameters
     * @param {module:models/NotificationPreferenceRequest} [notificationPreferenceRequest] 
     * @param {module:services/UsersApi~usersNotificationPreferencesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/NotificationPreference}
     */
    usersNotificationPreferencesUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationPreferenceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NotificationPreference;
      return this.apiClient.callApi(
        '/api/users/notification-preferences/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationsCountRetrieve operation.
     * @callback module:services/UsersApi~usersNotificationsCountRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/NotificationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for getting unread notification count
     * @param {module:services/UsersApi~usersNotificationsCountRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/NotificationList}
     */
    usersNotificationsCountRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationList;
      return this.apiClient.callApi(
        '/api/users/notifications/count/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationsList operation.
     * @callback module:services/UsersApi~usersNotificationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedNotificationListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for listing user notifications
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isRead] 
     * @param {module:models/String} [notificationType] * `application_status` - Application Status Change * `repayment_upcoming` - Repayment Upcoming * `repayment_overdue` - Repayment Overdue * `note_reminder` - Note Reminder * `document_uploaded` - Document Uploaded * `signature_required` - Signature Required * `system` - System Notification
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {module:services/UsersApi~usersNotificationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedNotificationListList}
     */
    usersNotificationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_read': opts['isRead'],
        'notification_type': opts['notificationType'],
        'ordering': opts['ordering'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedNotificationListList;
      return this.apiClient.callApi(
        '/api/users/notifications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationsMarkReadCreate operation.
     * @callback module:services/UsersApi~usersNotificationsMarkReadCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for marking notifications as read
     * @param {module:models/NotificationRequest} notificationRequest 
     * @param {module:services/UsersApi~usersNotificationsMarkReadCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Notification}
     */
    usersNotificationsMarkReadCreate(notificationRequest, callback) {
      let postBody = notificationRequest;
      // verify the required parameter 'notificationRequest' is set
      if (notificationRequest === undefined || notificationRequest === null) {
        throw new Error("Missing the required parameter 'notificationRequest' when calling usersNotificationsMarkReadCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/api/users/notifications/mark-read/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationsViewsetList operation.
     * @callback module:services/UsersApi~usersNotificationsViewsetListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedNotificationListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing notifications
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isRead] 
     * @param {module:models/String} [notificationType] * `application_status` - Application Status Change * `repayment_upcoming` - Repayment Upcoming * `repayment_overdue` - Repayment Overdue * `note_reminder` - Note Reminder * `document_uploaded` - Document Uploaded * `signature_required` - Signature Required * `system` - System Notification
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {module:services/UsersApi~usersNotificationsViewsetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedNotificationListList}
     */
    usersNotificationsViewsetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_read': opts['isRead'],
        'notification_type': opts['notificationType'],
        'ordering': opts['ordering'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedNotificationListList;
      return this.apiClient.callApi(
        '/api/users/notifications-viewset/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationsViewsetMarkAllAsReadCreate operation.
     * @callback module:services/UsersApi~usersNotificationsViewsetMarkAllAsReadCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark all notifications as read
     * @param {module:models/NotificationRequest} notificationRequest 
     * @param {module:services/UsersApi~usersNotificationsViewsetMarkAllAsReadCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Notification}
     */
    usersNotificationsViewsetMarkAllAsReadCreate(notificationRequest, callback) {
      let postBody = notificationRequest;
      // verify the required parameter 'notificationRequest' is set
      if (notificationRequest === undefined || notificationRequest === null) {
        throw new Error("Missing the required parameter 'notificationRequest' when calling usersNotificationsViewsetMarkAllAsReadCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/api/users/notifications-viewset/mark_all_as_read/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationsViewsetMarkAsReadCreate operation.
     * @callback module:services/UsersApi~usersNotificationsViewsetMarkAsReadCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a notification as read
     * @param {Number} id 
     * @param {module:models/NotificationRequest} notificationRequest 
     * @param {module:services/UsersApi~usersNotificationsViewsetMarkAsReadCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Notification}
     */
    usersNotificationsViewsetMarkAsReadCreate(id, notificationRequest, callback) {
      let postBody = notificationRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersNotificationsViewsetMarkAsReadCreate");
      }
      // verify the required parameter 'notificationRequest' is set
      if (notificationRequest === undefined || notificationRequest === null) {
        throw new Error("Missing the required parameter 'notificationRequest' when calling usersNotificationsViewsetMarkAsReadCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/api/users/notifications-viewset/{id}/mark_as_read/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationsViewsetRetrieve operation.
     * @callback module:services/UsersApi~usersNotificationsViewsetRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing notifications
     * @param {Number} id 
     * @param {module:services/UsersApi~usersNotificationsViewsetRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Notification}
     */
    usersNotificationsViewsetRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersNotificationsViewsetRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/api/users/notifications-viewset/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNotificationsViewsetUnreadCountRetrieve operation.
     * @callback module:services/UsersApi~usersNotificationsViewsetUnreadCountRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get count of unread notifications
     * @param {module:services/UsersApi~usersNotificationsViewsetUnreadCountRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Notification}
     */
    usersNotificationsViewsetUnreadCountRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/api/users/notifications-viewset/unread_count/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersProfileRetrieve operation.
     * @callback module:services/UsersApi~usersProfileRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for retrieving user profile
     * @param {module:services/UsersApi~usersProfileRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/User}
     */
    usersProfileRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/profile/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersProfileUpdatePartialUpdate operation.
     * @callback module:services/UsersApi~usersProfileUpdatePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for updating user profile
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedUserRequest} [patchedUserRequest] 
     * @param {module:services/UsersApi~usersProfileUpdatePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/User}
     */
    usersProfileUpdatePartialUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedUserRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/profile/update/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersProfileUpdateUpdate operation.
     * @callback module:services/UsersApi~usersProfileUpdateUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for updating user profile
     * @param {module:models/UserRequest} userRequest 
     * @param {module:services/UsersApi~usersProfileUpdateUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/User}
     */
    usersProfileUpdateUpdate(userRequest, callback) {
      let postBody = userRequest;
      // verify the required parameter 'userRequest' is set
      if (userRequest === undefined || userRequest === null) {
        throw new Error("Missing the required parameter 'userRequest' when calling usersProfileUpdateUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/profile/update/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersCreate operation.
     * @callback module:services/UsersApi~usersUsersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/UserCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing users
     * @param {module:models/UserCreateRequest} userCreateRequest 
     * @param {module:services/UsersApi~usersUsersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/UserCreate}
     */
    usersUsersCreate(userCreateRequest, callback) {
      let postBody = userCreateRequest;
      // verify the required parameter 'userCreateRequest' is set
      if (userCreateRequest === undefined || userCreateRequest === null) {
        throw new Error("Missing the required parameter 'userCreateRequest' when calling usersUsersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserCreate;
      return this.apiClient.callApi(
        '/api/users/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersDestroy operation.
     * @callback module:services/UsersApi~usersUsersDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing users
     * @param {Number} id A unique integer value identifying this user.
     * @param {module:services/UsersApi~usersUsersDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUsersDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUsersDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/users/users/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersList operation.
     * @callback module:services/UsersApi~usersUsersListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedUserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing users
     * @param {Object} opts Optional parameters
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/UsersApi~usersUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedUserList}
     */
    usersUsersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedUserList;
      return this.apiClient.callApi(
        '/api/users/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersMeRetrieve operation.
     * @callback module:services/UsersApi~usersUsersMeRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user information
     * @param {module:services/UsersApi~usersUsersMeRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/User}
     */
    usersUsersMeRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/users/me/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersPartialUpdate operation.
     * @callback module:services/UsersApi~usersUsersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing users
     * @param {Number} id A unique integer value identifying this user.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedUserRequest} [patchedUserRequest] 
     * @param {module:services/UsersApi~usersUsersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/User}
     */
    usersUsersPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedUserRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUsersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/users/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersRetrieve operation.
     * @callback module:services/UsersApi~usersUsersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing users
     * @param {Number} id A unique integer value identifying this user.
     * @param {module:services/UsersApi~usersUsersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/User}
     */
    usersUsersRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUsersRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/users/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersUpdate operation.
     * @callback module:services/UsersApi~usersUsersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing users
     * @param {Number} id A unique integer value identifying this user.
     * @param {module:models/UserRequest} userRequest 
     * @param {module:services/UsersApi~usersUsersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/User}
     */
    usersUsersUpdate(id, userRequest, callback) {
      let postBody = userRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUsersUpdate");
      }
      // verify the required parameter 'userRequest' is set
      if (userRequest === undefined || userRequest === null) {
        throw new Error("Missing the required parameter 'userRequest' when calling usersUsersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/users/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
