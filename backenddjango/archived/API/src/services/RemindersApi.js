/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedReminderList from '../models/PaginatedReminderList';
import PatchedReminderRequest from '../models/PatchedReminderRequest';
import Reminder from '../models/Reminder';
import ReminderRequest from '../models/ReminderRequest';

/**
* Reminders service.
* @module services/RemindersApi
* @version 1.0.0
*/
export default class RemindersApi {

    /**
    * Constructs a new RemindersApi. 
    * @alias module:services/RemindersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the remindersCreate operation.
     * @callback module:services/RemindersApi~remindersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Reminder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing reminders
     * @param {module:models/ReminderRequest} reminderRequest 
     * @param {module:services/RemindersApi~remindersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Reminder}
     */
    remindersCreate(reminderRequest, callback) {
      let postBody = reminderRequest;
      // verify the required parameter 'reminderRequest' is set
      if (reminderRequest === undefined || reminderRequest === null) {
        throw new Error("Missing the required parameter 'reminderRequest' when calling remindersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Reminder;
      return this.apiClient.callApi(
        '/api/reminders/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersDestroy operation.
     * @callback module:services/RemindersApi~remindersDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing reminders
     * @param {Number} id A unique integer value identifying this reminder.
     * @param {module:services/RemindersApi~remindersDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    remindersDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling remindersDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/reminders/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersList operation.
     * @callback module:services/RemindersApi~remindersListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedReminderList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing reminders
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isSent] 
     * @param {Number} [page] A page number within the paginated result set.
     * @param {module:models/String} [recipientType] * `client` - Client * `bdm` - Business Development Manager * `broker` - Broker * `custom` - Custom Email
     * @param {Number} [relatedApplication] 
     * @param {Number} [relatedBorrower] 
     * @param {String} [search] A search term.
     * @param {module:services/RemindersApi~remindersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedReminderList}
     */
    remindersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_sent': opts['isSent'],
        'page': opts['page'],
        'recipient_type': opts['recipientType'],
        'related_application': opts['relatedApplication'],
        'related_borrower': opts['relatedBorrower'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedReminderList;
      return this.apiClient.callApi(
        '/api/reminders/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersPartialUpdate operation.
     * @callback module:services/RemindersApi~remindersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Reminder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing reminders
     * @param {Number} id A unique integer value identifying this reminder.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedReminderRequest} [patchedReminderRequest] 
     * @param {module:services/RemindersApi~remindersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Reminder}
     */
    remindersPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedReminderRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling remindersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Reminder;
      return this.apiClient.callApi(
        '/api/reminders/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersRetrieve operation.
     * @callback module:services/RemindersApi~remindersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Reminder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing reminders
     * @param {Number} id A unique integer value identifying this reminder.
     * @param {module:services/RemindersApi~remindersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Reminder}
     */
    remindersRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling remindersRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reminder;
      return this.apiClient.callApi(
        '/api/reminders/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersUpdate operation.
     * @callback module:services/RemindersApi~remindersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Reminder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing reminders
     * @param {Number} id A unique integer value identifying this reminder.
     * @param {module:models/ReminderRequest} reminderRequest 
     * @param {module:services/RemindersApi~remindersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Reminder}
     */
    remindersUpdate(id, reminderRequest, callback) {
      let postBody = reminderRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling remindersUpdate");
      }
      // verify the required parameter 'reminderRequest' is set
      if (reminderRequest === undefined || reminderRequest === null) {
        throw new Error("Missing the required parameter 'reminderRequest' when calling remindersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Reminder;
      return this.apiClient.callApi(
        '/api/reminders/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
