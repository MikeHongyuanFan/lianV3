/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationTypeEnum from './NotificationTypeEnum';

/**
 * The NotificationList model module.
 * @module models/NotificationList
 * @version 1.0.0
 */
class NotificationList {
    /**
     * Constructs a new <code>NotificationList</code>.
     * Serializer for listing notifications
     * @alias module:models/NotificationList
     * @param id {Number} 
     * @param title {String} 
     * @param notificationType {module:models/NotificationTypeEnum} 
     * @param notificationTypeDisplay {String} 
     * @param createdAt {Date} 
     */
    constructor(id, title, notificationType, notificationTypeDisplay, createdAt) { 
        
        NotificationList.initialize(this, id, title, notificationType, notificationTypeDisplay, createdAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, title, notificationType, notificationTypeDisplay, createdAt) { 
        obj['id'] = id;
        obj['title'] = title;
        obj['notification_type'] = notificationType;
        obj['notification_type_display'] = notificationTypeDisplay;
        obj['created_at'] = createdAt;
    }

    /**
     * Constructs a <code>NotificationList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/NotificationList} obj Optional instance to populate.
     * @return {module:models/NotificationList} The populated <code>NotificationList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationList();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('notification_type')) {
                obj['notification_type'] = NotificationTypeEnum.constructFromObject(data['notification_type']);
            }
            if (data.hasOwnProperty('notification_type_display')) {
                obj['notification_type_display'] = ApiClient.convertToType(data['notification_type_display'], 'String');
            }
            if (data.hasOwnProperty('is_read')) {
                obj['is_read'] = ApiClient.convertToType(data['is_read'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['notification_type_display'] && !(typeof data['notification_type_display'] === 'string' || data['notification_type_display'] instanceof String)) {
            throw new Error("Expected the field `notification_type_display` to be a primitive type in the JSON string but got " + data['notification_type_display']);
        }

        return true;
    }


}

NotificationList.RequiredProperties = ["id", "title", "notification_type", "notification_type_display", "created_at"];

/**
 * @member {Number} id
 */
NotificationList.prototype['id'] = undefined;

/**
 * @member {String} title
 */
NotificationList.prototype['title'] = undefined;

/**
 * @member {module:models/NotificationTypeEnum} notification_type
 */
NotificationList.prototype['notification_type'] = undefined;

/**
 * @member {String} notification_type_display
 */
NotificationList.prototype['notification_type_display'] = undefined;

/**
 * @member {Boolean} is_read
 */
NotificationList.prototype['is_read'] = undefined;

/**
 * @member {Date} created_at
 */
NotificationList.prototype['created_at'] = undefined;






export default NotificationList;

