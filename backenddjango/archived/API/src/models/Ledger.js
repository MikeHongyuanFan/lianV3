/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionTypeEnum from './TransactionTypeEnum';

/**
 * The Ledger model module.
 * @module models/Ledger
 * @version 1.0.0
 */
class Ledger {
    /**
     * Constructs a new <code>Ledger</code>.
     * Serializer for ledger entries
     * @alias module:models/Ledger
     * @param id {Number} 
     * @param application {Number} 
     * @param transactionType {module:models/TransactionTypeEnum} 
     * @param transactionTypeDisplay {String} 
     * @param amount {Number} 
     * @param description {String} 
     * @param relatedFeeType {String} 
     * @param createdByName {String} 
     * @param createdAt {Date} 
     */
    constructor(id, application, transactionType, transactionTypeDisplay, amount, description, relatedFeeType, createdByName, createdAt) { 
        
        Ledger.initialize(this, id, application, transactionType, transactionTypeDisplay, amount, description, relatedFeeType, createdByName, createdAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, application, transactionType, transactionTypeDisplay, amount, description, relatedFeeType, createdByName, createdAt) { 
        obj['id'] = id;
        obj['application'] = application;
        obj['transaction_type'] = transactionType;
        obj['transaction_type_display'] = transactionTypeDisplay;
        obj['amount'] = amount;
        obj['description'] = description;
        obj['related_fee_type'] = relatedFeeType;
        obj['created_by_name'] = createdByName;
        obj['created_at'] = createdAt;
    }

    /**
     * Constructs a <code>Ledger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/Ledger} obj Optional instance to populate.
     * @return {module:models/Ledger} The populated <code>Ledger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Ledger();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('application')) {
                obj['application'] = ApiClient.convertToType(data['application'], 'Number');
            }
            if (data.hasOwnProperty('transaction_type')) {
                obj['transaction_type'] = TransactionTypeEnum.constructFromObject(data['transaction_type']);
            }
            if (data.hasOwnProperty('transaction_type_display')) {
                obj['transaction_type_display'] = ApiClient.convertToType(data['transaction_type_display'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('transaction_date')) {
                obj['transaction_date'] = ApiClient.convertToType(data['transaction_date'], 'Date');
            }
            if (data.hasOwnProperty('related_fee')) {
                obj['related_fee'] = ApiClient.convertToType(data['related_fee'], 'Number');
            }
            if (data.hasOwnProperty('related_fee_type')) {
                obj['related_fee_type'] = ApiClient.convertToType(data['related_fee_type'], 'String');
            }
            if (data.hasOwnProperty('related_repayment')) {
                obj['related_repayment'] = ApiClient.convertToType(data['related_repayment'], 'Number');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'Number');
            }
            if (data.hasOwnProperty('created_by_name')) {
                obj['created_by_name'] = ApiClient.convertToType(data['created_by_name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Ledger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Ledger</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Ledger.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['transaction_type_display'] && !(typeof data['transaction_type_display'] === 'string' || data['transaction_type_display'] instanceof String)) {
            throw new Error("Expected the field `transaction_type_display` to be a primitive type in the JSON string but got " + data['transaction_type_display']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['related_fee_type'] && !(typeof data['related_fee_type'] === 'string' || data['related_fee_type'] instanceof String)) {
            throw new Error("Expected the field `related_fee_type` to be a primitive type in the JSON string but got " + data['related_fee_type']);
        }
        // ensure the json data is a string
        if (data['created_by_name'] && !(typeof data['created_by_name'] === 'string' || data['created_by_name'] instanceof String)) {
            throw new Error("Expected the field `created_by_name` to be a primitive type in the JSON string but got " + data['created_by_name']);
        }

        return true;
    }


}

Ledger.RequiredProperties = ["id", "application", "transaction_type", "transaction_type_display", "amount", "description", "related_fee_type", "created_by_name", "created_at"];

/**
 * @member {Number} id
 */
Ledger.prototype['id'] = undefined;

/**
 * @member {Number} application
 */
Ledger.prototype['application'] = undefined;

/**
 * @member {module:models/TransactionTypeEnum} transaction_type
 */
Ledger.prototype['transaction_type'] = undefined;

/**
 * @member {String} transaction_type_display
 */
Ledger.prototype['transaction_type_display'] = undefined;

/**
 * @member {Number} amount
 */
Ledger.prototype['amount'] = undefined;

/**
 * @member {String} description
 */
Ledger.prototype['description'] = undefined;

/**
 * @member {Date} transaction_date
 */
Ledger.prototype['transaction_date'] = undefined;

/**
 * @member {Number} related_fee
 */
Ledger.prototype['related_fee'] = undefined;

/**
 * @member {String} related_fee_type
 */
Ledger.prototype['related_fee_type'] = undefined;

/**
 * @member {Number} related_repayment
 */
Ledger.prototype['related_repayment'] = undefined;

/**
 * @member {Number} created_by
 */
Ledger.prototype['created_by'] = undefined;

/**
 * @member {String} created_by_name
 */
Ledger.prototype['created_by_name'] = undefined;

/**
 * @member {Date} created_at
 */
Ledger.prototype['created_at'] = undefined;






export default Ledger;

