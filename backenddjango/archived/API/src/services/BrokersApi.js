/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BDM from '../models/BDM';
import BDMRequest from '../models/BDMRequest';
import Branch from '../models/Branch';
import BranchRequest from '../models/BranchRequest';
import BrokerDetail from '../models/BrokerDetail';
import BrokerDetailRequest from '../models/BrokerDetailRequest';
import PaginatedBDMList from '../models/PaginatedBDMList';
import PaginatedBranchList from '../models/PaginatedBranchList';
import PaginatedBrokerListList from '../models/PaginatedBrokerListList';
import PatchedBDMRequest from '../models/PatchedBDMRequest';
import PatchedBranchRequest from '../models/PatchedBranchRequest';
import PatchedBrokerDetailRequest from '../models/PatchedBrokerDetailRequest';

/**
* Brokers service.
* @module services/BrokersApi
* @version 1.0.0
*/
export default class BrokersApi {

    /**
    * Constructs a new BrokersApi. 
    * @alias module:services/BrokersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the brokersApplicationsRetrieve operation.
     * @callback module:services/BrokersApi~brokersApplicationsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BrokerDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all applications for a broker
     * @param {Number} id A unique integer value identifying this broker.
     * @param {module:services/BrokersApi~brokersApplicationsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BrokerDetail}
     */
    brokersApplicationsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersApplicationsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BrokerDetail;
      return this.apiClient.callApi(
        '/api/brokers/{id}/applications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBdmsApplicationsRetrieve operation.
     * @callback module:services/BrokersApi~brokersBdmsApplicationsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BDM} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all applications for a BDM
     * @param {Number} id A unique integer value identifying this BDM.
     * @param {module:services/BrokersApi~brokersBdmsApplicationsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BDM}
     */
    brokersBdmsApplicationsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBdmsApplicationsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BDM;
      return this.apiClient.callApi(
        '/api/brokers/bdms/{id}/applications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBdmsCreate operation.
     * @callback module:services/BrokersApi~brokersBdmsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BDM} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing BDMs
     * @param {module:models/BDMRequest} bDMRequest 
     * @param {module:services/BrokersApi~brokersBdmsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BDM}
     */
    brokersBdmsCreate(bDMRequest, callback) {
      let postBody = bDMRequest;
      // verify the required parameter 'bDMRequest' is set
      if (bDMRequest === undefined || bDMRequest === null) {
        throw new Error("Missing the required parameter 'bDMRequest' when calling brokersBdmsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BDM;
      return this.apiClient.callApi(
        '/api/brokers/bdms/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBdmsDestroy operation.
     * @callback module:services/BrokersApi~brokersBdmsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing BDMs
     * @param {Number} id A unique integer value identifying this BDM.
     * @param {module:services/BrokersApi~brokersBdmsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    brokersBdmsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBdmsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/brokers/bdms/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBdmsList operation.
     * @callback module:services/BrokersApi~brokersBdmsListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedBDMList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing BDMs
     * @param {Object} opts Optional parameters
     * @param {Number} [branch] 
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/BrokersApi~brokersBdmsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedBDMList}
     */
    brokersBdmsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'branch': opts['branch'],
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedBDMList;
      return this.apiClient.callApi(
        '/api/brokers/bdms/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBdmsPartialUpdate operation.
     * @callback module:services/BrokersApi~brokersBdmsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BDM} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing BDMs
     * @param {Number} id A unique integer value identifying this BDM.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedBDMRequest} [patchedBDMRequest] 
     * @param {module:services/BrokersApi~brokersBdmsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BDM}
     */
    brokersBdmsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedBDMRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBdmsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BDM;
      return this.apiClient.callApi(
        '/api/brokers/bdms/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBdmsRetrieve operation.
     * @callback module:services/BrokersApi~brokersBdmsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BDM} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing BDMs
     * @param {Number} id A unique integer value identifying this BDM.
     * @param {module:services/BrokersApi~brokersBdmsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BDM}
     */
    brokersBdmsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBdmsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BDM;
      return this.apiClient.callApi(
        '/api/brokers/bdms/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBdmsUpdate operation.
     * @callback module:services/BrokersApi~brokersBdmsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BDM} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing BDMs
     * @param {Number} id A unique integer value identifying this BDM.
     * @param {module:models/BDMRequest} bDMRequest 
     * @param {module:services/BrokersApi~brokersBdmsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BDM}
     */
    brokersBdmsUpdate(id, bDMRequest, callback) {
      let postBody = bDMRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBdmsUpdate");
      }
      // verify the required parameter 'bDMRequest' is set
      if (bDMRequest === undefined || bDMRequest === null) {
        throw new Error("Missing the required parameter 'bDMRequest' when calling brokersBdmsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BDM;
      return this.apiClient.callApi(
        '/api/brokers/bdms/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBranchesBdmsRetrieve operation.
     * @callback module:services/BrokersApi~brokersBranchesBdmsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Branch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all BDMs for a branch
     * @param {Number} id A unique integer value identifying this branch.
     * @param {module:services/BrokersApi~brokersBranchesBdmsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Branch}
     */
    brokersBranchesBdmsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBranchesBdmsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/api/brokers/branches/{id}/bdms/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBranchesBrokersRetrieve operation.
     * @callback module:services/BrokersApi~brokersBranchesBrokersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Branch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all brokers for a branch
     * @param {Number} id A unique integer value identifying this branch.
     * @param {module:services/BrokersApi~brokersBranchesBrokersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Branch}
     */
    brokersBranchesBrokersRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBranchesBrokersRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/api/brokers/branches/{id}/brokers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBranchesCreate operation.
     * @callback module:services/BrokersApi~brokersBranchesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Branch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing branches
     * @param {module:models/BranchRequest} branchRequest 
     * @param {module:services/BrokersApi~brokersBranchesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Branch}
     */
    brokersBranchesCreate(branchRequest, callback) {
      let postBody = branchRequest;
      // verify the required parameter 'branchRequest' is set
      if (branchRequest === undefined || branchRequest === null) {
        throw new Error("Missing the required parameter 'branchRequest' when calling brokersBranchesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/api/brokers/branches/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBranchesDestroy operation.
     * @callback module:services/BrokersApi~brokersBranchesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing branches
     * @param {Number} id A unique integer value identifying this branch.
     * @param {module:services/BrokersApi~brokersBranchesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    brokersBranchesDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBranchesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/brokers/branches/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBranchesList operation.
     * @callback module:services/BrokersApi~brokersBranchesListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedBranchList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing branches
     * @param {Object} opts Optional parameters
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/BrokersApi~brokersBranchesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedBranchList}
     */
    brokersBranchesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedBranchList;
      return this.apiClient.callApi(
        '/api/brokers/branches/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBranchesPartialUpdate operation.
     * @callback module:services/BrokersApi~brokersBranchesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Branch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing branches
     * @param {Number} id A unique integer value identifying this branch.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedBranchRequest} [patchedBranchRequest] 
     * @param {module:services/BrokersApi~brokersBranchesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Branch}
     */
    brokersBranchesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedBranchRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBranchesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/api/brokers/branches/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBranchesRetrieve operation.
     * @callback module:services/BrokersApi~brokersBranchesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Branch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing branches
     * @param {Number} id A unique integer value identifying this branch.
     * @param {module:services/BrokersApi~brokersBranchesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Branch}
     */
    brokersBranchesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBranchesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/api/brokers/branches/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersBranchesUpdate operation.
     * @callback module:services/BrokersApi~brokersBranchesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Branch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing branches
     * @param {Number} id A unique integer value identifying this branch.
     * @param {module:models/BranchRequest} branchRequest 
     * @param {module:services/BrokersApi~brokersBranchesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Branch}
     */
    brokersBranchesUpdate(id, branchRequest, callback) {
      let postBody = branchRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersBranchesUpdate");
      }
      // verify the required parameter 'branchRequest' is set
      if (branchRequest === undefined || branchRequest === null) {
        throw new Error("Missing the required parameter 'branchRequest' when calling brokersBranchesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/api/brokers/branches/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersCreate operation.
     * @callback module:services/BrokersApi~brokersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BrokerDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing brokers
     * @param {module:models/BrokerDetailRequest} brokerDetailRequest 
     * @param {module:services/BrokersApi~brokersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BrokerDetail}
     */
    brokersCreate(brokerDetailRequest, callback) {
      let postBody = brokerDetailRequest;
      // verify the required parameter 'brokerDetailRequest' is set
      if (brokerDetailRequest === undefined || brokerDetailRequest === null) {
        throw new Error("Missing the required parameter 'brokerDetailRequest' when calling brokersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BrokerDetail;
      return this.apiClient.callApi(
        '/api/brokers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersDestroy operation.
     * @callback module:services/BrokersApi~brokersDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing brokers
     * @param {Number} id A unique integer value identifying this broker.
     * @param {module:services/BrokersApi~brokersDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    brokersDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/brokers/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersList operation.
     * @callback module:services/BrokersApi~brokersListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedBrokerListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing brokers
     * @param {Object} opts Optional parameters
     * @param {Number} [branch] 
     * @param {Number} [minApplications] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/BrokersApi~brokersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedBrokerListList}
     */
    brokersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'branch': opts['branch'],
        'min_applications': opts['minApplications'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedBrokerListList;
      return this.apiClient.callApi(
        '/api/brokers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersPartialUpdate operation.
     * @callback module:services/BrokersApi~brokersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BrokerDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing brokers
     * @param {Number} id A unique integer value identifying this broker.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedBrokerDetailRequest} [patchedBrokerDetailRequest] 
     * @param {module:services/BrokersApi~brokersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BrokerDetail}
     */
    brokersPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedBrokerDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BrokerDetail;
      return this.apiClient.callApi(
        '/api/brokers/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersRetrieve operation.
     * @callback module:services/BrokersApi~brokersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BrokerDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing brokers
     * @param {Number} id A unique integer value identifying this broker.
     * @param {module:services/BrokersApi~brokersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BrokerDetail}
     */
    brokersRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BrokerDetail;
      return this.apiClient.callApi(
        '/api/brokers/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersStatsRetrieve operation.
     * @callback module:services/BrokersApi~brokersStatsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BrokerDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get statistics for a broker
     * @param {Number} id A unique integer value identifying this broker.
     * @param {module:services/BrokersApi~brokersStatsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BrokerDetail}
     */
    brokersStatsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersStatsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BrokerDetail;
      return this.apiClient.callApi(
        '/api/brokers/{id}/stats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the brokersUpdate operation.
     * @callback module:services/BrokersApi~brokersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/BrokerDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing brokers
     * @param {Number} id A unique integer value identifying this broker.
     * @param {module:models/BrokerDetailRequest} brokerDetailRequest 
     * @param {module:services/BrokersApi~brokersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/BrokerDetail}
     */
    brokersUpdate(id, brokerDetailRequest, callback) {
      let postBody = brokerDetailRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling brokersUpdate");
      }
      // verify the required parameter 'brokerDetailRequest' is set
      if (brokerDetailRequest === undefined || brokerDetailRequest === null) {
        throw new Error("Missing the required parameter 'brokerDetailRequest' when calling brokersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BrokerDetail;
      return this.apiClient.callApi(
        '/api/brokers/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
