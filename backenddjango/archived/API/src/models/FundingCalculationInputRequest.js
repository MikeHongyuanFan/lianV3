/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FundingCalculationInputRequest model module.
 * @module models/FundingCalculationInputRequest
 * @version 1.0.0
 */
class FundingCalculationInputRequest {
    /**
     * Constructs a new <code>FundingCalculationInputRequest</code>.
     * Serializer for funding calculation input fields
     * @alias module:models/FundingCalculationInputRequest
     * @param establishmentFeeRate {Number} 
     * @param monthlyLineFeeRate {Number} 
     * @param brokerageFeeRate {Number} 
     * @param applicationFee {Number} 
     * @param dueDiligenceFee {Number} 
     * @param legalFeeBeforeGst {Number} 
     * @param valuationFee {Number} 
     * @param monthlyAccountFee {Number} 
     */
    constructor(establishmentFeeRate, monthlyLineFeeRate, brokerageFeeRate, applicationFee, dueDiligenceFee, legalFeeBeforeGst, valuationFee, monthlyAccountFee) { 
        
        FundingCalculationInputRequest.initialize(this, establishmentFeeRate, monthlyLineFeeRate, brokerageFeeRate, applicationFee, dueDiligenceFee, legalFeeBeforeGst, valuationFee, monthlyAccountFee);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, establishmentFeeRate, monthlyLineFeeRate, brokerageFeeRate, applicationFee, dueDiligenceFee, legalFeeBeforeGst, valuationFee, monthlyAccountFee) { 
        obj['establishment_fee_rate'] = establishmentFeeRate;
        obj['capped_interest_months'] = 9;
        obj['monthly_line_fee_rate'] = monthlyLineFeeRate;
        obj['brokerage_fee_rate'] = brokerageFeeRate;
        obj['application_fee'] = applicationFee;
        obj['due_diligence_fee'] = dueDiligenceFee;
        obj['legal_fee_before_gst'] = legalFeeBeforeGst;
        obj['valuation_fee'] = valuationFee;
        obj['monthly_account_fee'] = monthlyAccountFee;
        obj['working_fee'] = '0.00';
    }

    /**
     * Constructs a <code>FundingCalculationInputRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/FundingCalculationInputRequest} obj Optional instance to populate.
     * @return {module:models/FundingCalculationInputRequest} The populated <code>FundingCalculationInputRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FundingCalculationInputRequest();

            if (data.hasOwnProperty('establishment_fee_rate')) {
                obj['establishment_fee_rate'] = ApiClient.convertToType(data['establishment_fee_rate'], 'Number');
            }
            if (data.hasOwnProperty('capped_interest_months')) {
                obj['capped_interest_months'] = ApiClient.convertToType(data['capped_interest_months'], 'Number');
            }
            if (data.hasOwnProperty('monthly_line_fee_rate')) {
                obj['monthly_line_fee_rate'] = ApiClient.convertToType(data['monthly_line_fee_rate'], 'Number');
            }
            if (data.hasOwnProperty('brokerage_fee_rate')) {
                obj['brokerage_fee_rate'] = ApiClient.convertToType(data['brokerage_fee_rate'], 'Number');
            }
            if (data.hasOwnProperty('application_fee')) {
                obj['application_fee'] = ApiClient.convertToType(data['application_fee'], 'Number');
            }
            if (data.hasOwnProperty('due_diligence_fee')) {
                obj['due_diligence_fee'] = ApiClient.convertToType(data['due_diligence_fee'], 'Number');
            }
            if (data.hasOwnProperty('legal_fee_before_gst')) {
                obj['legal_fee_before_gst'] = ApiClient.convertToType(data['legal_fee_before_gst'], 'Number');
            }
            if (data.hasOwnProperty('valuation_fee')) {
                obj['valuation_fee'] = ApiClient.convertToType(data['valuation_fee'], 'Number');
            }
            if (data.hasOwnProperty('monthly_account_fee')) {
                obj['monthly_account_fee'] = ApiClient.convertToType(data['monthly_account_fee'], 'Number');
            }
            if (data.hasOwnProperty('working_fee')) {
                obj['working_fee'] = ApiClient.convertToType(data['working_fee'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FundingCalculationInputRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FundingCalculationInputRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FundingCalculationInputRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['establishment_fee_rate'] && !(typeof data['establishment_fee_rate'] === 'string' || data['establishment_fee_rate'] instanceof String)) {
            throw new Error("Expected the field `establishment_fee_rate` to be a primitive type in the JSON string but got " + data['establishment_fee_rate']);
        }
        // ensure the json data is a string
        if (data['monthly_line_fee_rate'] && !(typeof data['monthly_line_fee_rate'] === 'string' || data['monthly_line_fee_rate'] instanceof String)) {
            throw new Error("Expected the field `monthly_line_fee_rate` to be a primitive type in the JSON string but got " + data['monthly_line_fee_rate']);
        }
        // ensure the json data is a string
        if (data['brokerage_fee_rate'] && !(typeof data['brokerage_fee_rate'] === 'string' || data['brokerage_fee_rate'] instanceof String)) {
            throw new Error("Expected the field `brokerage_fee_rate` to be a primitive type in the JSON string but got " + data['brokerage_fee_rate']);
        }
        // ensure the json data is a string
        if (data['application_fee'] && !(typeof data['application_fee'] === 'string' || data['application_fee'] instanceof String)) {
            throw new Error("Expected the field `application_fee` to be a primitive type in the JSON string but got " + data['application_fee']);
        }
        // ensure the json data is a string
        if (data['due_diligence_fee'] && !(typeof data['due_diligence_fee'] === 'string' || data['due_diligence_fee'] instanceof String)) {
            throw new Error("Expected the field `due_diligence_fee` to be a primitive type in the JSON string but got " + data['due_diligence_fee']);
        }
        // ensure the json data is a string
        if (data['legal_fee_before_gst'] && !(typeof data['legal_fee_before_gst'] === 'string' || data['legal_fee_before_gst'] instanceof String)) {
            throw new Error("Expected the field `legal_fee_before_gst` to be a primitive type in the JSON string but got " + data['legal_fee_before_gst']);
        }
        // ensure the json data is a string
        if (data['valuation_fee'] && !(typeof data['valuation_fee'] === 'string' || data['valuation_fee'] instanceof String)) {
            throw new Error("Expected the field `valuation_fee` to be a primitive type in the JSON string but got " + data['valuation_fee']);
        }
        // ensure the json data is a string
        if (data['monthly_account_fee'] && !(typeof data['monthly_account_fee'] === 'string' || data['monthly_account_fee'] instanceof String)) {
            throw new Error("Expected the field `monthly_account_fee` to be a primitive type in the JSON string but got " + data['monthly_account_fee']);
        }
        // ensure the json data is a string
        if (data['working_fee'] && !(typeof data['working_fee'] === 'string' || data['working_fee'] instanceof String)) {
            throw new Error("Expected the field `working_fee` to be a primitive type in the JSON string but got " + data['working_fee']);
        }

        return true;
    }


}

FundingCalculationInputRequest.RequiredProperties = ["establishment_fee_rate", "monthly_line_fee_rate", "brokerage_fee_rate", "application_fee", "due_diligence_fee", "legal_fee_before_gst", "valuation_fee", "monthly_account_fee"];

/**
 * @member {Number} establishment_fee_rate
 */
FundingCalculationInputRequest.prototype['establishment_fee_rate'] = undefined;

/**
 * @member {Number} capped_interest_months
 * @default 9
 */
FundingCalculationInputRequest.prototype['capped_interest_months'] = 9;

/**
 * @member {Number} monthly_line_fee_rate
 */
FundingCalculationInputRequest.prototype['monthly_line_fee_rate'] = undefined;

/**
 * @member {Number} brokerage_fee_rate
 */
FundingCalculationInputRequest.prototype['brokerage_fee_rate'] = undefined;

/**
 * @member {Number} application_fee
 */
FundingCalculationInputRequest.prototype['application_fee'] = undefined;

/**
 * @member {Number} due_diligence_fee
 */
FundingCalculationInputRequest.prototype['due_diligence_fee'] = undefined;

/**
 * @member {Number} legal_fee_before_gst
 */
FundingCalculationInputRequest.prototype['legal_fee_before_gst'] = undefined;

/**
 * @member {Number} valuation_fee
 */
FundingCalculationInputRequest.prototype['valuation_fee'] = undefined;

/**
 * @member {Number} monthly_account_fee
 */
FundingCalculationInputRequest.prototype['monthly_account_fee'] = undefined;

/**
 * @member {Number} working_fee
 * @default '0.00'
 */
FundingCalculationInputRequest.prototype['working_fee'] = '0.00';






export default FundingCalculationInputRequest;

