/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedProductList from '../models/PaginatedProductList';
import PatchedProductRequest from '../models/PatchedProductRequest';
import Product from '../models/Product';
import ProductRequest from '../models/ProductRequest';

/**
* Products service.
* @module services/ProductsApi
* @version 1.0.0
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:services/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productsProductsCreate operation.
     * @callback module:services/ProductsApi~productsProductsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan products
     * @param {module:models/ProductRequest} productRequest 
     * @param {module:services/ProductsApi~productsProductsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Product}
     */
    productsProductsCreate(productRequest, callback) {
      let postBody = productRequest;
      // verify the required parameter 'productRequest' is set
      if (productRequest === undefined || productRequest === null) {
        throw new Error("Missing the required parameter 'productRequest' when calling productsProductsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/api/products/products/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsProductsDestroy operation.
     * @callback module:services/ProductsApi~productsProductsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan products
     * @param {Number} id A unique integer value identifying this Product.
     * @param {module:services/ProductsApi~productsProductsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsProductsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productsProductsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/products/products/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsProductsList operation.
     * @callback module:services/ProductsApi~productsProductsListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan products
     * @param {Object} opts Optional parameters
     * @param {Number} [application] 
     * @param {Array.<Number>} [applications] 
     * @param {Number} [borrower] 
     * @param {Array.<Number>} [borrowers] 
     * @param {String} [name] 
     * @param {String} [nameIcontains] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/ProductsApi~productsProductsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedProductList}
     */
    productsProductsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'application': opts['application'],
        'applications': this.apiClient.buildCollectionParam(opts['applications'], 'multi'),
        'borrower': opts['borrower'],
        'borrowers': this.apiClient.buildCollectionParam(opts['borrowers'], 'multi'),
        'name': opts['name'],
        'name__icontains': opts['nameIcontains'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedProductList;
      return this.apiClient.callApi(
        '/api/products/products/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsProductsPartialUpdate operation.
     * @callback module:services/ProductsApi~productsProductsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan products
     * @param {Number} id A unique integer value identifying this Product.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedProductRequest} [patchedProductRequest] 
     * @param {module:services/ProductsApi~productsProductsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Product}
     */
    productsProductsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedProductRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productsProductsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/api/products/products/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsProductsRetrieve operation.
     * @callback module:services/ProductsApi~productsProductsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan products
     * @param {Number} id A unique integer value identifying this Product.
     * @param {module:services/ProductsApi~productsProductsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Product}
     */
    productsProductsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productsProductsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/api/products/products/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsProductsUpdate operation.
     * @callback module:services/ProductsApi~productsProductsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan products
     * @param {Number} id A unique integer value identifying this Product.
     * @param {module:models/ProductRequest} productRequest 
     * @param {module:services/ProductsApi~productsProductsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Product}
     */
    productsProductsUpdate(id, productRequest, callback) {
      let postBody = productRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productsProductsUpdate");
      }
      // verify the required parameter 'productRequest' is set
      if (productRequest === undefined || productRequest === null) {
        throw new Error("Missing the required parameter 'productRequest' when calling productsProductsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/api/products/products/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
