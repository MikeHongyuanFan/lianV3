/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationLedger from '../models/ApplicationLedger';
import Document from '../models/Document';
import DocumentTypeEnum from '../models/DocumentTypeEnum';
import Fee from '../models/Fee';
import FeeRequest from '../models/FeeRequest';
import Note from '../models/Note';
import NoteComment from '../models/NoteComment';
import NoteCommentRequest from '../models/NoteCommentRequest';
import NoteRequest from '../models/NoteRequest';
import PaginatedDocumentList from '../models/PaginatedDocumentList';
import PaginatedFeeList from '../models/PaginatedFeeList';
import PaginatedNoteCommentList from '../models/PaginatedNoteCommentList';
import PaginatedNoteList from '../models/PaginatedNoteList';
import PaginatedRepaymentList from '../models/PaginatedRepaymentList';
import PatchedFeeRequest from '../models/PatchedFeeRequest';
import PatchedNoteCommentRequest from '../models/PatchedNoteCommentRequest';
import PatchedNoteRequest from '../models/PatchedNoteRequest';
import PatchedRepaymentRequest from '../models/PatchedRepaymentRequest';
import Repayment from '../models/Repayment';
import RepaymentRequest from '../models/RepaymentRequest';

/**
* Documents service.
* @module services/DocumentsApi
* @version 1.0.0
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:services/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the documentsApplicationsLedgerRetrieve operation.
     * @callback module:services/DocumentsApi~documentsApplicationsLedgerRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationLedger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for getting the ledger for an application
     * @param {Number} applicationId 
     * @param {module:services/DocumentsApi~documentsApplicationsLedgerRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationLedger}
     */
    documentsApplicationsLedgerRetrieve(applicationId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling documentsApplicationsLedgerRetrieve");
      }

      let pathParams = {
        'application_id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationLedger;
      return this.apiClient.callApi(
        '/api/documents/applications/{application_id}/ledger/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentsCreate operation.
     * @callback module:services/DocumentsApi~documentsDocumentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing documents
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {String} [title] 
     * @param {String} [description] 
     * @param {module:models/DocumentTypeEnum} [documentType] 
     * @param {Number} [previousVersion] 
     * @param {Number} [application] 
     * @param {Number} [borrower] 
     * @param {module:services/DocumentsApi~documentsDocumentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Document}
     */
    documentsDocumentsCreate(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling documentsDocumentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'title': opts['title'],
        'description': opts['description'],
        'document_type': opts['documentType'],
        'file': file,
        'previous_version': opts['previousVersion'],
        'application': opts['application'],
        'borrower': opts['borrower']
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/documents/documents/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentsCreateVersionCreate operation.
     * @callback module:services/DocumentsApi~documentsDocumentsCreateVersionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for creating a new version of a document
     * @param {Number} id 
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {String} [title] 
     * @param {String} [description] 
     * @param {module:models/DocumentTypeEnum} [documentType] 
     * @param {Number} [previousVersion] 
     * @param {Number} [application] 
     * @param {Number} [borrower] 
     * @param {module:services/DocumentsApi~documentsDocumentsCreateVersionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Document}
     */
    documentsDocumentsCreateVersionCreate(id, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsDocumentsCreateVersionCreate");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling documentsDocumentsCreateVersionCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'title': opts['title'],
        'description': opts['description'],
        'document_type': opts['documentType'],
        'file': file,
        'previous_version': opts['previousVersion'],
        'application': opts['application'],
        'borrower': opts['borrower']
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/documents/documents/{id}/create-version/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentsDestroy operation.
     * @callback module:services/DocumentsApi~documentsDocumentsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing documents
     * @param {Number} id A unique integer value identifying this document.
     * @param {module:services/DocumentsApi~documentsDocumentsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsDocumentsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsDocumentsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/documents/documents/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentsDownloadRetrieve operation.
     * @callback module:services/DocumentsApi~documentsDocumentsDownloadRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a document
     * @param {Number} id A unique integer value identifying this document.
     * @param {module:services/DocumentsApi~documentsDocumentsDownloadRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Document}
     */
    documentsDocumentsDownloadRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsDocumentsDownloadRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/documents/documents/{id}/download/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentsList operation.
     * @callback module:services/DocumentsApi~documentsDocumentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedDocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing documents
     * @param {Object} opts Optional parameters
     * @param {Number} [application] 
     * @param {Number} [borrower] 
     * @param {Date} [createdAfter] 
     * @param {Date} [createdBefore] 
     * @param {module:models/String} [documentType] * `application_form` - Application Form * `indicative_letter` - Indicative Letter * `formal_approval` - Formal Approval * `valuation_report` - Valuation Report * `qs_report` - Quantity Surveyor Report * `id_verification` - ID Verification * `bank_statement` - Bank Statement * `payslip` - Payslip * `tax_return` - Tax Return * `contract` - Contract * `other` - Other
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/DocumentsApi~documentsDocumentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedDocumentList}
     */
    documentsDocumentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'application': opts['application'],
        'borrower': opts['borrower'],
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'document_type': opts['documentType'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDocumentList;
      return this.apiClient.callApi(
        '/api/documents/documents/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentsPartialUpdate operation.
     * @callback module:services/DocumentsApi~documentsDocumentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing documents
     * @param {Number} id A unique integer value identifying this document.
     * @param {Object} opts Optional parameters
     * @param {String} [title] 
     * @param {String} [description] 
     * @param {module:models/DocumentTypeEnum} [documentType] 
     * @param {File} [file] 
     * @param {Number} [previousVersion] 
     * @param {Number} [application] 
     * @param {Number} [borrower] 
     * @param {module:services/DocumentsApi~documentsDocumentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Document}
     */
    documentsDocumentsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsDocumentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'title': opts['title'],
        'description': opts['description'],
        'document_type': opts['documentType'],
        'file': opts['file'],
        'previous_version': opts['previousVersion'],
        'application': opts['application'],
        'borrower': opts['borrower']
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/documents/documents/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentsRetrieve operation.
     * @callback module:services/DocumentsApi~documentsDocumentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing documents
     * @param {Number} id A unique integer value identifying this document.
     * @param {module:services/DocumentsApi~documentsDocumentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Document}
     */
    documentsDocumentsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsDocumentsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/documents/documents/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentsUpdate operation.
     * @callback module:services/DocumentsApi~documentsDocumentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing documents
     * @param {Number} id A unique integer value identifying this document.
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {String} [title] 
     * @param {String} [description] 
     * @param {module:models/DocumentTypeEnum} [documentType] 
     * @param {Number} [previousVersion] 
     * @param {Number} [application] 
     * @param {Number} [borrower] 
     * @param {module:services/DocumentsApi~documentsDocumentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Document}
     */
    documentsDocumentsUpdate(id, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsDocumentsUpdate");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling documentsDocumentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'title': opts['title'],
        'description': opts['description'],
        'document_type': opts['documentType'],
        'file': file,
        'previous_version': opts['previousVersion'],
        'application': opts['application'],
        'borrower': opts['borrower']
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/documents/documents/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFeesCreate operation.
     * @callback module:services/DocumentsApi~documentsFeesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Fee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing fees
     * @param {module:models/FeeRequest} feeRequest 
     * @param {module:services/DocumentsApi~documentsFeesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Fee}
     */
    documentsFeesCreate(feeRequest, callback) {
      let postBody = feeRequest;
      // verify the required parameter 'feeRequest' is set
      if (feeRequest === undefined || feeRequest === null) {
        throw new Error("Missing the required parameter 'feeRequest' when calling documentsFeesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Fee;
      return this.apiClient.callApi(
        '/api/documents/fees/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFeesDestroy operation.
     * @callback module:services/DocumentsApi~documentsFeesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing fees
     * @param {Number} id A unique integer value identifying this fee.
     * @param {module:services/DocumentsApi~documentsFeesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsFeesDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsFeesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/documents/fees/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFeesList operation.
     * @callback module:services/DocumentsApi~documentsFeesListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedFeeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing fees
     * @param {Object} opts Optional parameters
     * @param {Number} [application] 
     * @param {Date} [dueAfter] 
     * @param {Date} [dueBefore] 
     * @param {module:models/String} [feeType] * `application` - Application Fee * `valuation` - Valuation Fee * `legal` - Legal Fee * `broker` - Broker Fee * `settlement` - Settlement Fee * `other` - Other Fee
     * @param {Boolean} [isPaid] 
     * @param {Number} [maxAmount] 
     * @param {Number} [minAmount] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/DocumentsApi~documentsFeesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedFeeList}
     */
    documentsFeesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'application': opts['application'],
        'due_after': opts['dueAfter'],
        'due_before': opts['dueBefore'],
        'fee_type': opts['feeType'],
        'is_paid': opts['isPaid'],
        'max_amount': opts['maxAmount'],
        'min_amount': opts['minAmount'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedFeeList;
      return this.apiClient.callApi(
        '/api/documents/fees/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFeesMarkPaidCreate operation.
     * @callback module:services/DocumentsApi~documentsFeesMarkPaidCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Fee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for marking a fee as paid
     * @param {Number} id 
     * @param {module:models/FeeRequest} feeRequest 
     * @param {module:services/DocumentsApi~documentsFeesMarkPaidCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Fee}
     */
    documentsFeesMarkPaidCreate(id, feeRequest, callback) {
      let postBody = feeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsFeesMarkPaidCreate");
      }
      // verify the required parameter 'feeRequest' is set
      if (feeRequest === undefined || feeRequest === null) {
        throw new Error("Missing the required parameter 'feeRequest' when calling documentsFeesMarkPaidCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Fee;
      return this.apiClient.callApi(
        '/api/documents/fees/{id}/mark-paid/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFeesPartialUpdate operation.
     * @callback module:services/DocumentsApi~documentsFeesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Fee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing fees
     * @param {Number} id A unique integer value identifying this fee.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedFeeRequest} [patchedFeeRequest] 
     * @param {module:services/DocumentsApi~documentsFeesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Fee}
     */
    documentsFeesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedFeeRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsFeesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Fee;
      return this.apiClient.callApi(
        '/api/documents/fees/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFeesRetrieve operation.
     * @callback module:services/DocumentsApi~documentsFeesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Fee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing fees
     * @param {Number} id A unique integer value identifying this fee.
     * @param {module:services/DocumentsApi~documentsFeesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Fee}
     */
    documentsFeesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsFeesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Fee;
      return this.apiClient.callApi(
        '/api/documents/fees/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFeesUpdate operation.
     * @callback module:services/DocumentsApi~documentsFeesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Fee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing fees
     * @param {Number} id A unique integer value identifying this fee.
     * @param {module:models/FeeRequest} feeRequest 
     * @param {module:services/DocumentsApi~documentsFeesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Fee}
     */
    documentsFeesUpdate(id, feeRequest, callback) {
      let postBody = feeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsFeesUpdate");
      }
      // verify the required parameter 'feeRequest' is set
      if (feeRequest === undefined || feeRequest === null) {
        throw new Error("Missing the required parameter 'feeRequest' when calling documentsFeesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Fee;
      return this.apiClient.callApi(
        '/api/documents/fees/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNoteCommentsCreate operation.
     * @callback module:services/DocumentsApi~documentsNoteCommentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/NoteComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing note comments
     * @param {module:models/NoteCommentRequest} noteCommentRequest 
     * @param {module:services/DocumentsApi~documentsNoteCommentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/NoteComment}
     */
    documentsNoteCommentsCreate(noteCommentRequest, callback) {
      let postBody = noteCommentRequest;
      // verify the required parameter 'noteCommentRequest' is set
      if (noteCommentRequest === undefined || noteCommentRequest === null) {
        throw new Error("Missing the required parameter 'noteCommentRequest' when calling documentsNoteCommentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NoteComment;
      return this.apiClient.callApi(
        '/api/documents/note-comments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNoteCommentsDestroy operation.
     * @callback module:services/DocumentsApi~documentsNoteCommentsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing note comments
     * @param {Number} id A unique integer value identifying this note comment.
     * @param {module:services/DocumentsApi~documentsNoteCommentsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsNoteCommentsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNoteCommentsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/documents/note-comments/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNoteCommentsList operation.
     * @callback module:services/DocumentsApi~documentsNoteCommentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedNoteCommentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing note comments
     * @param {Object} opts Optional parameters
     * @param {Date} [createdAfter] 
     * @param {Date} [createdBefore] 
     * @param {Number} [createdBy] 
     * @param {Number} [note] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/DocumentsApi~documentsNoteCommentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedNoteCommentList}
     */
    documentsNoteCommentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'created_by': opts['createdBy'],
        'note': opts['note'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedNoteCommentList;
      return this.apiClient.callApi(
        '/api/documents/note-comments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNoteCommentsPartialUpdate operation.
     * @callback module:services/DocumentsApi~documentsNoteCommentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/NoteComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing note comments
     * @param {Number} id A unique integer value identifying this note comment.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedNoteCommentRequest} [patchedNoteCommentRequest] 
     * @param {module:services/DocumentsApi~documentsNoteCommentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/NoteComment}
     */
    documentsNoteCommentsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedNoteCommentRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNoteCommentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NoteComment;
      return this.apiClient.callApi(
        '/api/documents/note-comments/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNoteCommentsRetrieve operation.
     * @callback module:services/DocumentsApi~documentsNoteCommentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/NoteComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing note comments
     * @param {Number} id A unique integer value identifying this note comment.
     * @param {module:services/DocumentsApi~documentsNoteCommentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/NoteComment}
     */
    documentsNoteCommentsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNoteCommentsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NoteComment;
      return this.apiClient.callApi(
        '/api/documents/note-comments/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNoteCommentsUpdate operation.
     * @callback module:services/DocumentsApi~documentsNoteCommentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/NoteComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing note comments
     * @param {Number} id A unique integer value identifying this note comment.
     * @param {module:models/NoteCommentRequest} noteCommentRequest 
     * @param {module:services/DocumentsApi~documentsNoteCommentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/NoteComment}
     */
    documentsNoteCommentsUpdate(id, noteCommentRequest, callback) {
      let postBody = noteCommentRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNoteCommentsUpdate");
      }
      // verify the required parameter 'noteCommentRequest' is set
      if (noteCommentRequest === undefined || noteCommentRequest === null) {
        throw new Error("Missing the required parameter 'noteCommentRequest' when calling documentsNoteCommentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NoteComment;
      return this.apiClient.callApi(
        '/api/documents/note-comments/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNotesAddCommentCreate operation.
     * @callback module:services/DocumentsApi~documentsNotesAddCommentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a comment to a note
     * @param {Number} id A unique integer value identifying this note.
     * @param {Object} opts Optional parameters
     * @param {module:models/NoteRequest} [noteRequest] 
     * @param {module:services/DocumentsApi~documentsNotesAddCommentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Note}
     */
    documentsNotesAddCommentCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['noteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNotesAddCommentCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/api/documents/notes/{id}/add_comment/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNotesCommentsRetrieve operation.
     * @callback module:services/DocumentsApi~documentsNotesCommentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all comments for a note
     * @param {Number} id A unique integer value identifying this note.
     * @param {module:services/DocumentsApi~documentsNotesCommentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Note}
     */
    documentsNotesCommentsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNotesCommentsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/api/documents/notes/{id}/comments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNotesCreate operation.
     * @callback module:services/DocumentsApi~documentsNotesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing notes
     * @param {Object} opts Optional parameters
     * @param {module:models/NoteRequest} [noteRequest] 
     * @param {module:services/DocumentsApi~documentsNotesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Note}
     */
    documentsNotesCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['noteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/api/documents/notes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNotesDestroy operation.
     * @callback module:services/DocumentsApi~documentsNotesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing notes
     * @param {Number} id A unique integer value identifying this note.
     * @param {module:services/DocumentsApi~documentsNotesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsNotesDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNotesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/documents/notes/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNotesList operation.
     * @callback module:services/DocumentsApi~documentsNotesListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedNoteList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing notes
     * @param {Object} opts Optional parameters
     * @param {Number} [application] 
     * @param {Number} [borrower] 
     * @param {Date} [createdAfter] 
     * @param {Date} [createdBefore] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/DocumentsApi~documentsNotesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedNoteList}
     */
    documentsNotesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'application': opts['application'],
        'borrower': opts['borrower'],
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedNoteList;
      return this.apiClient.callApi(
        '/api/documents/notes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNotesPartialUpdate operation.
     * @callback module:services/DocumentsApi~documentsNotesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing notes
     * @param {Number} id A unique integer value identifying this note.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedNoteRequest} [patchedNoteRequest] 
     * @param {module:services/DocumentsApi~documentsNotesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Note}
     */
    documentsNotesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedNoteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNotesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/api/documents/notes/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNotesRetrieve operation.
     * @callback module:services/DocumentsApi~documentsNotesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing notes
     * @param {Number} id A unique integer value identifying this note.
     * @param {module:services/DocumentsApi~documentsNotesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Note}
     */
    documentsNotesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNotesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/api/documents/notes/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsNotesUpdate operation.
     * @callback module:services/DocumentsApi~documentsNotesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing notes
     * @param {Number} id A unique integer value identifying this note.
     * @param {Object} opts Optional parameters
     * @param {module:models/NoteRequest} [noteRequest] 
     * @param {module:services/DocumentsApi~documentsNotesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Note}
     */
    documentsNotesUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['noteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsNotesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/api/documents/notes/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsRepaymentsCreate operation.
     * @callback module:services/DocumentsApi~documentsRepaymentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Repayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing repayments
     * @param {module:models/RepaymentRequest} repaymentRequest 
     * @param {module:services/DocumentsApi~documentsRepaymentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Repayment}
     */
    documentsRepaymentsCreate(repaymentRequest, callback) {
      let postBody = repaymentRequest;
      // verify the required parameter 'repaymentRequest' is set
      if (repaymentRequest === undefined || repaymentRequest === null) {
        throw new Error("Missing the required parameter 'repaymentRequest' when calling documentsRepaymentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Repayment;
      return this.apiClient.callApi(
        '/api/documents/repayments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsRepaymentsDestroy operation.
     * @callback module:services/DocumentsApi~documentsRepaymentsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing repayments
     * @param {Number} id A unique integer value identifying this repayment.
     * @param {module:services/DocumentsApi~documentsRepaymentsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsRepaymentsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsRepaymentsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/documents/repayments/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsRepaymentsList operation.
     * @callback module:services/DocumentsApi~documentsRepaymentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedRepaymentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing repayments
     * @param {Object} opts Optional parameters
     * @param {Number} [application] 
     * @param {Date} [dueAfter] 
     * @param {Date} [dueBefore] 
     * @param {Boolean} [isPaid] 
     * @param {Number} [maxAmount] 
     * @param {Number} [minAmount] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {String} [search] A search term.
     * @param {module:services/DocumentsApi~documentsRepaymentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedRepaymentList}
     */
    documentsRepaymentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'application': opts['application'],
        'due_after': opts['dueAfter'],
        'due_before': opts['dueBefore'],
        'is_paid': opts['isPaid'],
        'max_amount': opts['maxAmount'],
        'min_amount': opts['minAmount'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedRepaymentList;
      return this.apiClient.callApi(
        '/api/documents/repayments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsRepaymentsMarkPaidCreate operation.
     * @callback module:services/DocumentsApi~documentsRepaymentsMarkPaidCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Repayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for marking a repayment as paid
     * @param {Number} id 
     * @param {module:models/RepaymentRequest} repaymentRequest 
     * @param {module:services/DocumentsApi~documentsRepaymentsMarkPaidCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Repayment}
     */
    documentsRepaymentsMarkPaidCreate(id, repaymentRequest, callback) {
      let postBody = repaymentRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsRepaymentsMarkPaidCreate");
      }
      // verify the required parameter 'repaymentRequest' is set
      if (repaymentRequest === undefined || repaymentRequest === null) {
        throw new Error("Missing the required parameter 'repaymentRequest' when calling documentsRepaymentsMarkPaidCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Repayment;
      return this.apiClient.callApi(
        '/api/documents/repayments/{id}/mark-paid/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsRepaymentsPartialUpdate operation.
     * @callback module:services/DocumentsApi~documentsRepaymentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Repayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing repayments
     * @param {Number} id A unique integer value identifying this repayment.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedRepaymentRequest} [patchedRepaymentRequest] 
     * @param {module:services/DocumentsApi~documentsRepaymentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Repayment}
     */
    documentsRepaymentsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedRepaymentRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsRepaymentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Repayment;
      return this.apiClient.callApi(
        '/api/documents/repayments/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsRepaymentsRetrieve operation.
     * @callback module:services/DocumentsApi~documentsRepaymentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Repayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing repayments
     * @param {Number} id A unique integer value identifying this repayment.
     * @param {module:services/DocumentsApi~documentsRepaymentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Repayment}
     */
    documentsRepaymentsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsRepaymentsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Repayment;
      return this.apiClient.callApi(
        '/api/documents/repayments/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsRepaymentsUpdate operation.
     * @callback module:services/DocumentsApi~documentsRepaymentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Repayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing repayments
     * @param {Number} id A unique integer value identifying this repayment.
     * @param {module:models/RepaymentRequest} repaymentRequest 
     * @param {module:services/DocumentsApi~documentsRepaymentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Repayment}
     */
    documentsRepaymentsUpdate(id, repaymentRequest, callback) {
      let postBody = repaymentRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsRepaymentsUpdate");
      }
      // verify the required parameter 'repaymentRequest' is set
      if (repaymentRequest === undefined || repaymentRequest === null) {
        throw new Error("Missing the required parameter 'repaymentRequest' when calling documentsRepaymentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Repayment;
      return this.apiClient.callApi(
        '/api/documents/repayments/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
