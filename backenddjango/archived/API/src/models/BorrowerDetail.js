/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BorrowerDetailEmploymentType from './BorrowerDetailEmploymentType';
import BorrowerMaritalStatus from './BorrowerMaritalStatus';
import BorrowerResidencyStatus from './BorrowerResidencyStatus';
import User from './User';

/**
 * The BorrowerDetail model module.
 * @module models/BorrowerDetail
 * @version 1.0.0
 */
class BorrowerDetail {
    /**
     * Constructs a new <code>BorrowerDetail</code>.
     * Serializer for detailed borrower information
     * @alias module:models/BorrowerDetail
     * @param id {Number} 
     * @param createdBy {module:models/User} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(id, createdBy, createdAt, updatedAt) { 
        
        BorrowerDetail.initialize(this, id, createdBy, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdBy, createdAt, updatedAt) { 
        obj['id'] = id;
        obj['created_by'] = createdBy;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>BorrowerDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/BorrowerDetail} obj Optional instance to populate.
     * @return {module:models/BorrowerDetail} The populated <code>BorrowerDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BorrowerDetail();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], User);
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('date_of_birth')) {
                obj['date_of_birth'] = ApiClient.convertToType(data['date_of_birth'], 'Date');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('residential_address')) {
                obj['residential_address'] = ApiClient.convertToType(data['residential_address'], 'String');
            }
            if (data.hasOwnProperty('mailing_address')) {
                obj['mailing_address'] = ApiClient.convertToType(data['mailing_address'], 'String');
            }
            if (data.hasOwnProperty('tax_id')) {
                obj['tax_id'] = ApiClient.convertToType(data['tax_id'], 'String');
            }
            if (data.hasOwnProperty('marital_status')) {
                obj['marital_status'] = BorrowerMaritalStatus.constructFromObject(data['marital_status']);
            }
            if (data.hasOwnProperty('residency_status')) {
                obj['residency_status'] = BorrowerResidencyStatus.constructFromObject(data['residency_status']);
            }
            if (data.hasOwnProperty('employment_type')) {
                obj['employment_type'] = BorrowerDetailEmploymentType.constructFromObject(data['employment_type']);
            }
            if (data.hasOwnProperty('employer_name')) {
                obj['employer_name'] = ApiClient.convertToType(data['employer_name'], 'String');
            }
            if (data.hasOwnProperty('employer_address')) {
                obj['employer_address'] = ApiClient.convertToType(data['employer_address'], 'String');
            }
            if (data.hasOwnProperty('job_title')) {
                obj['job_title'] = ApiClient.convertToType(data['job_title'], 'String');
            }
            if (data.hasOwnProperty('employment_duration')) {
                obj['employment_duration'] = ApiClient.convertToType(data['employment_duration'], 'Number');
            }
            if (data.hasOwnProperty('annual_income')) {
                obj['annual_income'] = ApiClient.convertToType(data['annual_income'], 'Number');
            }
            if (data.hasOwnProperty('other_income')) {
                obj['other_income'] = ApiClient.convertToType(data['other_income'], 'Number');
            }
            if (data.hasOwnProperty('monthly_expenses')) {
                obj['monthly_expenses'] = ApiClient.convertToType(data['monthly_expenses'], 'Number');
            }
            if (data.hasOwnProperty('bank_name')) {
                obj['bank_name'] = ApiClient.convertToType(data['bank_name'], 'String');
            }
            if (data.hasOwnProperty('bank_account_name')) {
                obj['bank_account_name'] = ApiClient.convertToType(data['bank_account_name'], 'String');
            }
            if (data.hasOwnProperty('bank_account_number')) {
                obj['bank_account_number'] = ApiClient.convertToType(data['bank_account_number'], 'String');
            }
            if (data.hasOwnProperty('bank_bsb')) {
                obj['bank_bsb'] = ApiClient.convertToType(data['bank_bsb'], 'String');
            }
            if (data.hasOwnProperty('referral_source')) {
                obj['referral_source'] = ApiClient.convertToType(data['referral_source'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('notes_text')) {
                obj['notes_text'] = ApiClient.convertToType(data['notes_text'], 'String');
            }
            if (data.hasOwnProperty('is_company')) {
                obj['is_company'] = ApiClient.convertToType(data['is_company'], 'Boolean');
            }
            if (data.hasOwnProperty('company_name')) {
                obj['company_name'] = ApiClient.convertToType(data['company_name'], 'String');
            }
            if (data.hasOwnProperty('company_abn')) {
                obj['company_abn'] = ApiClient.convertToType(data['company_abn'], 'String');
            }
            if (data.hasOwnProperty('company_acn')) {
                obj['company_acn'] = ApiClient.convertToType(data['company_acn'], 'String');
            }
            if (data.hasOwnProperty('company_address')) {
                obj['company_address'] = ApiClient.convertToType(data['company_address'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BorrowerDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BorrowerDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BorrowerDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `created_by`
        if (data['created_by']) { // data not null
          User.validateJSON(data['created_by']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['residential_address'] && !(typeof data['residential_address'] === 'string' || data['residential_address'] instanceof String)) {
            throw new Error("Expected the field `residential_address` to be a primitive type in the JSON string but got " + data['residential_address']);
        }
        // ensure the json data is a string
        if (data['mailing_address'] && !(typeof data['mailing_address'] === 'string' || data['mailing_address'] instanceof String)) {
            throw new Error("Expected the field `mailing_address` to be a primitive type in the JSON string but got " + data['mailing_address']);
        }
        // ensure the json data is a string
        if (data['tax_id'] && !(typeof data['tax_id'] === 'string' || data['tax_id'] instanceof String)) {
            throw new Error("Expected the field `tax_id` to be a primitive type in the JSON string but got " + data['tax_id']);
        }
        // validate the optional field `marital_status`
        if (data['marital_status']) { // data not null
          BorrowerMaritalStatus.validateJSON(data['marital_status']);
        }
        // validate the optional field `residency_status`
        if (data['residency_status']) { // data not null
          BorrowerResidencyStatus.validateJSON(data['residency_status']);
        }
        // validate the optional field `employment_type`
        if (data['employment_type']) { // data not null
          BorrowerDetailEmploymentType.validateJSON(data['employment_type']);
        }
        // ensure the json data is a string
        if (data['employer_name'] && !(typeof data['employer_name'] === 'string' || data['employer_name'] instanceof String)) {
            throw new Error("Expected the field `employer_name` to be a primitive type in the JSON string but got " + data['employer_name']);
        }
        // ensure the json data is a string
        if (data['employer_address'] && !(typeof data['employer_address'] === 'string' || data['employer_address'] instanceof String)) {
            throw new Error("Expected the field `employer_address` to be a primitive type in the JSON string but got " + data['employer_address']);
        }
        // ensure the json data is a string
        if (data['job_title'] && !(typeof data['job_title'] === 'string' || data['job_title'] instanceof String)) {
            throw new Error("Expected the field `job_title` to be a primitive type in the JSON string but got " + data['job_title']);
        }
        // ensure the json data is a string
        if (data['annual_income'] && !(typeof data['annual_income'] === 'string' || data['annual_income'] instanceof String)) {
            throw new Error("Expected the field `annual_income` to be a primitive type in the JSON string but got " + data['annual_income']);
        }
        // ensure the json data is a string
        if (data['other_income'] && !(typeof data['other_income'] === 'string' || data['other_income'] instanceof String)) {
            throw new Error("Expected the field `other_income` to be a primitive type in the JSON string but got " + data['other_income']);
        }
        // ensure the json data is a string
        if (data['monthly_expenses'] && !(typeof data['monthly_expenses'] === 'string' || data['monthly_expenses'] instanceof String)) {
            throw new Error("Expected the field `monthly_expenses` to be a primitive type in the JSON string but got " + data['monthly_expenses']);
        }
        // ensure the json data is a string
        if (data['bank_name'] && !(typeof data['bank_name'] === 'string' || data['bank_name'] instanceof String)) {
            throw new Error("Expected the field `bank_name` to be a primitive type in the JSON string but got " + data['bank_name']);
        }
        // ensure the json data is a string
        if (data['bank_account_name'] && !(typeof data['bank_account_name'] === 'string' || data['bank_account_name'] instanceof String)) {
            throw new Error("Expected the field `bank_account_name` to be a primitive type in the JSON string but got " + data['bank_account_name']);
        }
        // ensure the json data is a string
        if (data['bank_account_number'] && !(typeof data['bank_account_number'] === 'string' || data['bank_account_number'] instanceof String)) {
            throw new Error("Expected the field `bank_account_number` to be a primitive type in the JSON string but got " + data['bank_account_number']);
        }
        // ensure the json data is a string
        if (data['bank_bsb'] && !(typeof data['bank_bsb'] === 'string' || data['bank_bsb'] instanceof String)) {
            throw new Error("Expected the field `bank_bsb` to be a primitive type in the JSON string but got " + data['bank_bsb']);
        }
        // ensure the json data is a string
        if (data['referral_source'] && !(typeof data['referral_source'] === 'string' || data['referral_source'] instanceof String)) {
            throw new Error("Expected the field `referral_source` to be a primitive type in the JSON string but got " + data['referral_source']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['notes_text'] && !(typeof data['notes_text'] === 'string' || data['notes_text'] instanceof String)) {
            throw new Error("Expected the field `notes_text` to be a primitive type in the JSON string but got " + data['notes_text']);
        }
        // ensure the json data is a string
        if (data['company_name'] && !(typeof data['company_name'] === 'string' || data['company_name'] instanceof String)) {
            throw new Error("Expected the field `company_name` to be a primitive type in the JSON string but got " + data['company_name']);
        }
        // ensure the json data is a string
        if (data['company_abn'] && !(typeof data['company_abn'] === 'string' || data['company_abn'] instanceof String)) {
            throw new Error("Expected the field `company_abn` to be a primitive type in the JSON string but got " + data['company_abn']);
        }
        // ensure the json data is a string
        if (data['company_acn'] && !(typeof data['company_acn'] === 'string' || data['company_acn'] instanceof String)) {
            throw new Error("Expected the field `company_acn` to be a primitive type in the JSON string but got " + data['company_acn']);
        }
        // ensure the json data is a string
        if (data['company_address'] && !(typeof data['company_address'] === 'string' || data['company_address'] instanceof String)) {
            throw new Error("Expected the field `company_address` to be a primitive type in the JSON string but got " + data['company_address']);
        }

        return true;
    }


}

BorrowerDetail.RequiredProperties = ["id", "created_by", "created_at", "updated_at"];

/**
 * @member {Number} id
 */
BorrowerDetail.prototype['id'] = undefined;

/**
 * @member {module:models/User} created_by
 */
BorrowerDetail.prototype['created_by'] = undefined;

/**
 * @member {String} first_name
 */
BorrowerDetail.prototype['first_name'] = undefined;

/**
 * @member {String} last_name
 */
BorrowerDetail.prototype['last_name'] = undefined;

/**
 * @member {Date} date_of_birth
 */
BorrowerDetail.prototype['date_of_birth'] = undefined;

/**
 * @member {String} email
 */
BorrowerDetail.prototype['email'] = undefined;

/**
 * @member {String} phone
 */
BorrowerDetail.prototype['phone'] = undefined;

/**
 * @member {String} residential_address
 */
BorrowerDetail.prototype['residential_address'] = undefined;

/**
 * @member {String} mailing_address
 */
BorrowerDetail.prototype['mailing_address'] = undefined;

/**
 * Tax File Number or equivalent
 * @member {String} tax_id
 */
BorrowerDetail.prototype['tax_id'] = undefined;

/**
 * @member {module:models/BorrowerMaritalStatus} marital_status
 */
BorrowerDetail.prototype['marital_status'] = undefined;

/**
 * @member {module:models/BorrowerResidencyStatus} residency_status
 */
BorrowerDetail.prototype['residency_status'] = undefined;

/**
 * @member {module:models/BorrowerDetailEmploymentType} employment_type
 */
BorrowerDetail.prototype['employment_type'] = undefined;

/**
 * @member {String} employer_name
 */
BorrowerDetail.prototype['employer_name'] = undefined;

/**
 * @member {String} employer_address
 */
BorrowerDetail.prototype['employer_address'] = undefined;

/**
 * @member {String} job_title
 */
BorrowerDetail.prototype['job_title'] = undefined;

/**
 * Duration in months
 * @member {Number} employment_duration
 */
BorrowerDetail.prototype['employment_duration'] = undefined;

/**
 * @member {Number} annual_income
 */
BorrowerDetail.prototype['annual_income'] = undefined;

/**
 * @member {Number} other_income
 */
BorrowerDetail.prototype['other_income'] = undefined;

/**
 * @member {Number} monthly_expenses
 */
BorrowerDetail.prototype['monthly_expenses'] = undefined;

/**
 * @member {String} bank_name
 */
BorrowerDetail.prototype['bank_name'] = undefined;

/**
 * @member {String} bank_account_name
 */
BorrowerDetail.prototype['bank_account_name'] = undefined;

/**
 * @member {String} bank_account_number
 */
BorrowerDetail.prototype['bank_account_number'] = undefined;

/**
 * @member {String} bank_bsb
 */
BorrowerDetail.prototype['bank_bsb'] = undefined;

/**
 * @member {String} referral_source
 */
BorrowerDetail.prototype['referral_source'] = undefined;

/**
 * @member {String} tags
 */
BorrowerDetail.prototype['tags'] = undefined;

/**
 * @member {String} notes_text
 */
BorrowerDetail.prototype['notes_text'] = undefined;

/**
 * @member {Boolean} is_company
 */
BorrowerDetail.prototype['is_company'] = undefined;

/**
 * @member {String} company_name
 */
BorrowerDetail.prototype['company_name'] = undefined;

/**
 * @member {String} company_abn
 */
BorrowerDetail.prototype['company_abn'] = undefined;

/**
 * @member {String} company_acn
 */
BorrowerDetail.prototype['company_acn'] = undefined;

/**
 * @member {String} company_address
 */
BorrowerDetail.prototype['company_address'] = undefined;

/**
 * @member {Date} created_at
 */
BorrowerDetail.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
BorrowerDetail.prototype['updated_at'] = undefined;

/**
 * @member {Number} user
 */
BorrowerDetail.prototype['user'] = undefined;






export default BorrowerDetail;

