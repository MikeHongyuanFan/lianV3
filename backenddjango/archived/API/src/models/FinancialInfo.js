/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FinancialInfo model module.
 * @module models/FinancialInfo
 * @version 1.0.0
 */
class FinancialInfo {
    /**
     * Constructs a new <code>FinancialInfo</code>.
     * @alias module:models/FinancialInfo
     * @param annualRevenue {Number} 
     * @param netProfit {Number} 
     * @param assets {Number} 
     * @param liabilities {Number} 
     */
    constructor(annualRevenue, netProfit, assets, liabilities) { 
        
        FinancialInfo.initialize(this, annualRevenue, netProfit, assets, liabilities);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, annualRevenue, netProfit, assets, liabilities) { 
        obj['annual_revenue'] = annualRevenue;
        obj['net_profit'] = netProfit;
        obj['assets'] = assets;
        obj['liabilities'] = liabilities;
    }

    /**
     * Constructs a <code>FinancialInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/FinancialInfo} obj Optional instance to populate.
     * @return {module:models/FinancialInfo} The populated <code>FinancialInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FinancialInfo();

            if (data.hasOwnProperty('annual_revenue')) {
                obj['annual_revenue'] = ApiClient.convertToType(data['annual_revenue'], 'Number');
            }
            if (data.hasOwnProperty('net_profit')) {
                obj['net_profit'] = ApiClient.convertToType(data['net_profit'], 'Number');
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = ApiClient.convertToType(data['assets'], 'Number');
            }
            if (data.hasOwnProperty('liabilities')) {
                obj['liabilities'] = ApiClient.convertToType(data['liabilities'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FinancialInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FinancialInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FinancialInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['annual_revenue'] && !(typeof data['annual_revenue'] === 'string' || data['annual_revenue'] instanceof String)) {
            throw new Error("Expected the field `annual_revenue` to be a primitive type in the JSON string but got " + data['annual_revenue']);
        }
        // ensure the json data is a string
        if (data['net_profit'] && !(typeof data['net_profit'] === 'string' || data['net_profit'] instanceof String)) {
            throw new Error("Expected the field `net_profit` to be a primitive type in the JSON string but got " + data['net_profit']);
        }
        // ensure the json data is a string
        if (data['assets'] && !(typeof data['assets'] === 'string' || data['assets'] instanceof String)) {
            throw new Error("Expected the field `assets` to be a primitive type in the JSON string but got " + data['assets']);
        }
        // ensure the json data is a string
        if (data['liabilities'] && !(typeof data['liabilities'] === 'string' || data['liabilities'] instanceof String)) {
            throw new Error("Expected the field `liabilities` to be a primitive type in the JSON string but got " + data['liabilities']);
        }

        return true;
    }


}

FinancialInfo.RequiredProperties = ["annual_revenue", "net_profit", "assets", "liabilities"];

/**
 * @member {Number} annual_revenue
 */
FinancialInfo.prototype['annual_revenue'] = undefined;

/**
 * @member {Number} net_profit
 */
FinancialInfo.prototype['net_profit'] = undefined;

/**
 * @member {Number} assets
 */
FinancialInfo.prototype['assets'] = undefined;

/**
 * @member {Number} liabilities
 */
FinancialInfo.prototype['liabilities'] = undefined;






export default FinancialInfo;

