/**
 * CRM Loan Management System API
 * A comprehensive CRM system for loan applications with fully synchronized frontend and backend development.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationBorrower from '../models/ApplicationBorrower';
import ApplicationBorrowerRequest from '../models/ApplicationBorrowerRequest';
import ApplicationCreate from '../models/ApplicationCreate';
import ApplicationCreateRequest from '../models/ApplicationCreateRequest';
import ApplicationDetail from '../models/ApplicationDetail';
import ApplicationDetailRequest from '../models/ApplicationDetailRequest';
import ApplicationSignature from '../models/ApplicationSignature';
import ApplicationSignatureRequest from '../models/ApplicationSignatureRequest';
import ApplicationStageUpdate from '../models/ApplicationStageUpdate';
import ApplicationStageUpdateRequest from '../models/ApplicationStageUpdateRequest';
import FundingCalculationHistory from '../models/FundingCalculationHistory';
import FundingCalculationInput from '../models/FundingCalculationInput';
import FundingCalculationInputRequest from '../models/FundingCalculationInputRequest';
import LoanExtension from '../models/LoanExtension';
import LoanExtensionRequest from '../models/LoanExtensionRequest';
import PaginatedApplicationDetailList from '../models/PaginatedApplicationDetailList';
import PatchedApplicationDetailRequest from '../models/PatchedApplicationDetailRequest';

/**
* Applications service.
* @module services/ApplicationsApi
* @version 1.0.0
*/
export default class ApplicationsApi {

    /**
    * Constructs a new ApplicationsApi. 
    * @alias module:services/ApplicationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applicationsApplicationsAddFeeCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsAddFeeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a fee to an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsAddFeeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsAddFeeCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsAddFeeCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/add_fee/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsAddNoteCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsAddNoteCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a note to an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsAddNoteCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsAddNoteCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsAddNoteCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/add_note/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsAddRepaymentCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsAddRepaymentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a repayment to an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsAddRepaymentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsAddRepaymentCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsAddRepaymentCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/add_repayment/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsBorrowersUpdate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsBorrowersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update borrowers for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsBorrowersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsBorrowersUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsBorrowersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/borrowers/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan applications
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationCreateRequest} [applicationCreateRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationCreate}
     */
    applicationsApplicationsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationCreate;
      return this.apiClient.callApi(
        '/api/applications/applications/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsDestroy operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan applications
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:services/ApplicationsApi~applicationsApplicationsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applicationsApplicationsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsDocumentsRetrieve operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsDocumentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all documents for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:services/ApplicationsApi~applicationsApplicationsDocumentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsDocumentsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsDocumentsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/documents/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsExtendLoanCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsExtendLoanCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/LoanExtension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extend a loan with new terms and regenerate repayment schedule
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:models/LoanExtensionRequest} loanExtensionRequest 
     * @param {module:services/ApplicationsApi~applicationsApplicationsExtendLoanCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/LoanExtension}
     */
    applicationsApplicationsExtendLoanCreate(id, loanExtensionRequest, callback) {
      let postBody = loanExtensionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsExtendLoanCreate");
      }
      // verify the required parameter 'loanExtensionRequest' is set
      if (loanExtensionRequest === undefined || loanExtensionRequest === null) {
        throw new Error("Missing the required parameter 'loanExtensionRequest' when calling applicationsApplicationsExtendLoanCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = LoanExtension;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/extend_loan/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsFeesRetrieve operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsFeesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all fees for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:services/ApplicationsApi~applicationsApplicationsFeesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsFeesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsFeesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/fees/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsFundingCalculationCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsFundingCalculationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/FundingCalculationInput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update funding calculation for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:models/FundingCalculationInputRequest} fundingCalculationInputRequest 
     * @param {module:services/ApplicationsApi~applicationsApplicationsFundingCalculationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/FundingCalculationInput}
     */
    applicationsApplicationsFundingCalculationCreate(id, fundingCalculationInputRequest, callback) {
      let postBody = fundingCalculationInputRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsFundingCalculationCreate");
      }
      // verify the required parameter 'fundingCalculationInputRequest' is set
      if (fundingCalculationInputRequest === undefined || fundingCalculationInputRequest === null) {
        throw new Error("Missing the required parameter 'fundingCalculationInputRequest' when calling applicationsApplicationsFundingCalculationCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FundingCalculationInput;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/funding_calculation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsFundingCalculationHistoryRetrieve operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsFundingCalculationHistoryRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/FundingCalculationHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get funding calculation history for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:services/ApplicationsApi~applicationsApplicationsFundingCalculationHistoryRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/FundingCalculationHistory}
     */
    applicationsApplicationsFundingCalculationHistoryRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsFundingCalculationHistoryRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FundingCalculationHistory;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/funding_calculation_history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsLedgerRetrieve operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsLedgerRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ledger entries for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:services/ApplicationsApi~applicationsApplicationsLedgerRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsLedgerRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsLedgerRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/ledger/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsList operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PaginatedApplicationDetailList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan applications
     * @param {Object} opts Optional parameters
     * @param {module:models/String} [applicationType] * `residential` - Residential * `commercial` - Commercial * `construction` - Construction * `refinance` - Refinance * `investment` - Investment * `smsf` - SMSF
     * @param {Number} [bd] 
     * @param {Number} [branch] 
     * @param {Number} [broker] 
     * @param {Date} [createdAfter] 
     * @param {Date} [createdBefore] 
     * @param {Number} [maxInterestRate] 
     * @param {Number} [maxLoanAmount] 
     * @param {Number} [minInterestRate] 
     * @param {Number} [minLoanAmount] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {module:models/String} [repaymentFrequency] * `weekly` - Weekly * `fortnightly` - Fortnightly * `monthly` - Monthly * `quarterly` - Quarterly * `annually` - Annually
     * @param {String} [search] A search term.
     * @param {module:models/String} [stage] * `inquiry` - Inquiry * `sent_to_lender` - Sent to Lender * `funding_table_issued` - Funding Table Issued * `iloo_issued` - ILOO Issued * `iloo_signed` - ILOO Signed * `commitment_fee_paid` - Commitment Fee Paid * `app_submitted` - App Submitted * `valuation_ordered` - Valuation Ordered * `valuation_received` - Valuation Received * `more_info_required` - More Info Required * `formal_approval` - Formal Approval * `loan_docs_instructed` - Loan Docs Instructed * `loan_docs_issued` - Loan Docs Issued * `loan_docs_signed` - Loan Docs Signed * `settlement_conditions` - Settlement Conditions * `settled` - Settled * `closed` - Closed * `declined` - Declined * `withdrawn` - Withdrawn
     * @param {module:services/ApplicationsApi~applicationsApplicationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PaginatedApplicationDetailList}
     */
    applicationsApplicationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'application_type': opts['applicationType'],
        'bd': opts['bd'],
        'branch': opts['branch'],
        'broker': opts['broker'],
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'max_interest_rate': opts['maxInterestRate'],
        'max_loan_amount': opts['maxLoanAmount'],
        'min_interest_rate': opts['minInterestRate'],
        'min_loan_amount': opts['minLoanAmount'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'repayment_frequency': opts['repaymentFrequency'],
        'search': opts['search'],
        'stage': opts['stage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedApplicationDetailList;
      return this.apiClient.callApi(
        '/api/applications/applications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsNotesRetrieve operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsNotesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all notes for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:services/ApplicationsApi~applicationsApplicationsNotesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsNotesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsNotesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/notes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsPartialUpdate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan applications
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/PatchedApplicationDetailRequest} [patchedApplicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedApplicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsRecordPaymentCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsRecordPaymentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Record a payment for a repayment
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsRecordPaymentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsRecordPaymentCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsRecordPaymentCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/record_payment/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsRemoveBorrowersCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsRemoveBorrowersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationBorrower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove borrowers from application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:models/ApplicationBorrowerRequest} applicationBorrowerRequest 
     * @param {module:services/ApplicationsApi~applicationsApplicationsRemoveBorrowersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationBorrower}
     */
    applicationsApplicationsRemoveBorrowersCreate(id, applicationBorrowerRequest, callback) {
      let postBody = applicationBorrowerRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsRemoveBorrowersCreate");
      }
      // verify the required parameter 'applicationBorrowerRequest' is set
      if (applicationBorrowerRequest === undefined || applicationBorrowerRequest === null) {
        throw new Error("Missing the required parameter 'applicationBorrowerRequest' when calling applicationsApplicationsRemoveBorrowersCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationBorrower;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/remove_borrowers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsRepaymentsRetrieve operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsRepaymentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all repayments for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:services/ApplicationsApi~applicationsApplicationsRepaymentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsRepaymentsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsRepaymentsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/repayments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsRetrieve operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan applications
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:services/ApplicationsApi~applicationsApplicationsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsSignCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsSignCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationSignature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:models/ApplicationSignatureRequest} applicationSignatureRequest 
     * @param {module:services/ApplicationsApi~applicationsApplicationsSignCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationSignature}
     */
    applicationsApplicationsSignCreate(id, applicationSignatureRequest, callback) {
      let postBody = applicationSignatureRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsSignCreate");
      }
      // verify the required parameter 'applicationSignatureRequest' is set
      if (applicationSignatureRequest === undefined || applicationSignatureRequest === null) {
        throw new Error("Missing the required parameter 'applicationSignatureRequest' when calling applicationsApplicationsSignCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationSignature;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/sign/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsSignatureCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsSignatureCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process signature for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsSignatureCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsSignatureCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsSignatureCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/signature/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsUpdate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan applications
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsUpdateStageCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsUpdateStageCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationStageUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update application stage
     * @param {Number} id A unique integer value identifying this application.
     * @param {module:models/ApplicationStageUpdateRequest} applicationStageUpdateRequest 
     * @param {module:services/ApplicationsApi~applicationsApplicationsUpdateStageCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationStageUpdate}
     */
    applicationsApplicationsUpdateStageCreate(id, applicationStageUpdateRequest, callback) {
      let postBody = applicationStageUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsUpdateStageCreate");
      }
      // verify the required parameter 'applicationStageUpdateRequest' is set
      if (applicationStageUpdateRequest === undefined || applicationStageUpdateRequest === null) {
        throw new Error("Missing the required parameter 'applicationStageUpdateRequest' when calling applicationsApplicationsUpdateStageCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationStageUpdate;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/update_stage/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsUploadDocumentCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsUploadDocumentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a document for an application
     * @param {Number} id A unique integer value identifying this application.
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsUploadDocumentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsUploadDocumentCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsApplicationsUploadDocumentCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/{id}/upload_document/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsApplicationsValidateSchemaCreate operation.
     * @callback module:services/ApplicationsApi~applicationsApplicationsValidateSchemaCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate application schema
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsApplicationsValidateSchemaCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsApplicationsValidateSchemaCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/applications/validate_schema/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsBorrowersUpdate operation.
     * @callback module:services/ApplicationsApi~applicationsBorrowersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update borrowers for an application
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsBorrowersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsBorrowersUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsBorrowersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/{id}/borrowers/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsCreateWithCascadeCreate operation.
     * @callback module:services/ApplicationsApi~applicationsCreateWithCascadeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoint for managing loan applications
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationCreateRequest} [applicationCreateRequest] 
     * @param {module:services/ApplicationsApi~applicationsCreateWithCascadeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationCreate}
     */
    applicationsCreateWithCascadeCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationCreate;
      return this.apiClient.callApi(
        '/api/applications/create-with-cascade/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsExtendLoanCreate operation.
     * @callback module:services/ApplicationsApi~applicationsExtendLoanCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/LoanExtension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extend a loan with new terms and regenerate repayment schedule
     * @param {Number} id 
     * @param {module:models/LoanExtensionRequest} loanExtensionRequest 
     * @param {module:services/ApplicationsApi~applicationsExtendLoanCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/LoanExtension}
     */
    applicationsExtendLoanCreate(id, loanExtensionRequest, callback) {
      let postBody = loanExtensionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsExtendLoanCreate");
      }
      // verify the required parameter 'loanExtensionRequest' is set
      if (loanExtensionRequest === undefined || loanExtensionRequest === null) {
        throw new Error("Missing the required parameter 'loanExtensionRequest' when calling applicationsExtendLoanCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = LoanExtension;
      return this.apiClient.callApi(
        '/api/applications/{id}/extend-loan/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsFundingCalculationCreate operation.
     * @callback module:services/ApplicationsApi~applicationsFundingCalculationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/FundingCalculationInput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update funding calculation for an application
     * @param {Number} id 
     * @param {module:models/FundingCalculationInputRequest} fundingCalculationInputRequest 
     * @param {module:services/ApplicationsApi~applicationsFundingCalculationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/FundingCalculationInput}
     */
    applicationsFundingCalculationCreate(id, fundingCalculationInputRequest, callback) {
      let postBody = fundingCalculationInputRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsFundingCalculationCreate");
      }
      // verify the required parameter 'fundingCalculationInputRequest' is set
      if (fundingCalculationInputRequest === undefined || fundingCalculationInputRequest === null) {
        throw new Error("Missing the required parameter 'fundingCalculationInputRequest' when calling applicationsFundingCalculationCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FundingCalculationInput;
      return this.apiClient.callApi(
        '/api/applications/{id}/funding-calculation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsFundingCalculationHistoryRetrieve operation.
     * @callback module:services/ApplicationsApi~applicationsFundingCalculationHistoryRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/FundingCalculationHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get funding calculation history for an application
     * @param {Number} id 
     * @param {module:services/ApplicationsApi~applicationsFundingCalculationHistoryRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/FundingCalculationHistory}
     */
    applicationsFundingCalculationHistoryRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsFundingCalculationHistoryRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FundingCalculationHistory;
      return this.apiClient.callApi(
        '/api/applications/{id}/funding-calculation-history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsSignCreate operation.
     * @callback module:services/ApplicationsApi~applicationsSignCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationSignature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign an application
     * @param {Number} id 
     * @param {module:models/ApplicationSignatureRequest} applicationSignatureRequest 
     * @param {module:services/ApplicationsApi~applicationsSignCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationSignature}
     */
    applicationsSignCreate(id, applicationSignatureRequest, callback) {
      let postBody = applicationSignatureRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsSignCreate");
      }
      // verify the required parameter 'applicationSignatureRequest' is set
      if (applicationSignatureRequest === undefined || applicationSignatureRequest === null) {
        throw new Error("Missing the required parameter 'applicationSignatureRequest' when calling applicationsSignCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationSignature;
      return this.apiClient.callApi(
        '/api/applications/{id}/sign/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsSignatureCreate operation.
     * @callback module:services/ApplicationsApi~applicationsSignatureCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process signature for an application
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsSignatureCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsSignatureCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsSignatureCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/{id}/signature/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsStageUpdate operation.
     * @callback module:services/ApplicationsApi~applicationsStageUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationStageUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update application stage
     * @param {Number} id 
     * @param {module:models/ApplicationStageUpdateRequest} applicationStageUpdateRequest 
     * @param {module:services/ApplicationsApi~applicationsStageUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationStageUpdate}
     */
    applicationsStageUpdate(id, applicationStageUpdateRequest, callback) {
      let postBody = applicationStageUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationsStageUpdate");
      }
      // verify the required parameter 'applicationStageUpdateRequest' is set
      if (applicationStageUpdateRequest === undefined || applicationStageUpdateRequest === null) {
        throw new Error("Missing the required parameter 'applicationStageUpdateRequest' when calling applicationsStageUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationStageUpdate;
      return this.apiClient.callApi(
        '/api/applications/{id}/stage/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsValidateSchemaCreate operation.
     * @callback module:services/ApplicationsApi~applicationsValidateSchemaCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate application schema
     * @param {Object} opts Optional parameters
     * @param {module:models/ApplicationDetailRequest} [applicationDetailRequest] 
     * @param {module:services/ApplicationsApi~applicationsValidateSchemaCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicationDetail}
     */
    applicationsValidateSchemaCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationDetailRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationDetail;
      return this.apiClient.callApi(
        '/api/applications/validate-schema/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
